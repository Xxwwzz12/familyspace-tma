// frontend/src/services/auth.service.ts

import { Environment } from '../utils/environment';
import { apiClient } from '../utils/apiClient';

export interface AuthResult {
  success: boolean;
  token?: string;
  user?: any;
  error?: string;
}

export class AuthService {
  constructor() {
    this.initializeAuth();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ä–≤–∏—Å–∞
   * –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω –∏–∑ localStorage –µ—Å–ª–∏ –µ—Å—Ç—å
   */
  private initializeAuth(): void {
    const storedToken = localStorage.getItem('auth_token');
    if (storedToken) {
      this.setAuthToken(storedToken);
      console.log('üîë Restored auth token from storage');
    }
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ø–æ—Å–æ–± –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
   */
  async authenticate(): Promise<AuthResult> {
    console.log('üîê Starting authentication in environment:', Environment.getEnvironment());
    
    if (Environment.isTelegram()) {
      return await this.authenticateTelegram();
    } else {
      return {
        success: false,
        error: 'Telegram Login Widget not yet implemented'
      };
    }
  }

  /**
   * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram Mini App
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç /auth/init
   */
  private async authenticateTelegram(): Promise<AuthResult> {
    try {
      const authParams = Environment.getAuthParams();
      
      if (!authParams.initData) {
        return {
          success: false,
          error: 'No initData available in Telegram environment'
        };
      }

      console.log('üì± Authenticating via Telegram Mini App...');
      const response = await apiClient.post('/auth/init', { 
        initData: authParams.initData 
      });
      
      console.log('‚úÖ Telegram Mini App authentication successful');
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      if (response.data.token) {
        this.setAuthToken(response.data.token);
      }
      
      return {
        success: true,
        token: response.data.token,
        user: response.data.user
      };
    } catch (error: any) {
      console.error('‚ùå Telegram Mini App authentication failed:', error);
      
      return {
        success: false,
        error: error.response?.data?.message || 'Telegram authentication failed'
      };
    }
  }

  /**
   * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram Login Widget (–¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞)
   * –ë—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —ç—Ç–∞–ø–µ
   */
  async authenticateTelegramWidget(authData: any): Promise<AuthResult> {
    console.log('üåê Authenticating via Telegram Widget...', authData);
    
    try {
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—ã–∑–æ–≤ –±—ç–∫–µ–Ω–¥–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–∂–µ—Ç–∞
      // –°–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç /auth/telegram-widget
      const response = await apiClient.post('/auth/telegram-widget', authData);
      
      if (response.data.token) {
        this.setAuthToken(response.data.token);
      }
      
      return {
        success: true,
        token: response.data.token,
        user: response.data.user
      };
    } catch (error: any) {
      console.error('‚ùå Telegram Widget authentication failed:', error);
      
      return {
        success: false,
        error: error.response?.data?.message || 'Telegram Widget authentication failed'
      };
    }
  }

  /**
   * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
   */
  logout(): void {
    // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ localStorage
    localStorage.removeItem('auth_token');
    
    // –£–¥–∞–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization –∏–∑ apiClient
    delete apiClient.defaults.headers.common['Authorization'];
    
    console.log('üö™ User logged out');
    
    // –ï—Å–ª–∏ –≤ Telegram, –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å WebApp
    if (Environment.isTelegram() && (window as any).Telegram?.WebApp) {
      // (window as any).Telegram.WebApp.close(); // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
   */
  hasStoredToken(): boolean {
    return !!localStorage.getItem('auth_token');
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  setAuthToken(token: string): void {
    localStorage.setItem('auth_token', token);
    apiClient.defaults.headers.common['Authorization'] = `Bearer ${token}`;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω
   */
  getToken(): string | null {
    return localStorage.getItem('auth_token');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   */
  isAuthenticated(): boolean {
    return this.hasStoredToken();
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
export const authService = new AuthService();