// frontend/src/services/auth.service.ts

import { Environment } from '../utils/environment';
import { apiClient } from '../utils/apiClient';

export interface AuthResult {
  success: boolean;
  token?: string;
  user?: any;
  error?: string;
}

export class AuthService {
  constructor() {
    this.initializeAuth();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ä–≤–∏—Å–∞
   */
  private initializeAuth(): void {
    const storedToken = localStorage.getItem('auth_token');
    if (storedToken) {
      this.setAuthToken(storedToken);
      console.log('üîë Restored auth token from storage');
    }
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ø–æ—Å–æ–± –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
   */
  async authenticate(): Promise<AuthResult> {
    console.log('üîê Starting authentication in environment:', Environment.getEnvironment());
    
    if (Environment.isTelegram()) {
      return await this.authenticateTelegram();
    } else {
      // –î–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞
      return {
        success: false,
        error: 'Use Telegram Login Widget for browser authentication'
      };
    }
  }

  /**
   * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram Mini App
   */
  private async authenticateTelegram(): Promise<AuthResult> {
    try {
      const authParams = Environment.getAuthParams();
      
      if (!authParams.initData) {
        return {
          success: false,
          error: 'No initData available in Telegram environment'
        };
      }

      console.log('üì± Authenticating via Telegram Mini App...');
      const response = await apiClient.post('/auth/init', { 
        initData: authParams.initData 
      });
      
      console.log('‚úÖ Telegram Mini App authentication successful');
      
      if (response.data.token) {
        this.setAuthToken(response.data.token);
      }
      
      return {
        success: true,
        token: response.data.token,
        user: response.data.user
      };
    } catch (error: any) {
      console.error('‚ùå Telegram Mini App authentication failed:', error);
      
      return {
        success: false,
        error: error.response?.data?.message || 'Telegram authentication failed'
      };
    }
  }

  /**
   * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram Login Widget
   * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ TelegramAuthWidget –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
   */
  async authenticateTelegramWidget(widgetData: any): Promise<AuthResult> {
    try {
      console.log('üîê Processing Telegram Widget auth data:', {
        id: widgetData.id,
        first_name: widgetData.first_name,
        username: widgetData.username,
        auth_date: new Date(widgetData.auth_date * 1000).toISOString()
      });

      // –í–ê–õ–ò–î–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      if (!widgetData.id || !widgetData.auth_date || !widgetData.hash) {
        const error = 'Missing required Telegram Widget fields';
        console.error('‚ùå', error, widgetData);
        return { success: false, error };
      }

      // –û–¢–ü–†–ê–í–ö–ê –ù–ê –ë–≠–ö–ï–ù–î: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç /auth/telegram-widget
      const response = await apiClient.post('/auth/telegram-widget', {
        authData: widgetData
      });

      console.log('‚úÖ Telegram Widget backend response:', response.data);

      // –°–û–•–†–ê–ù–ï–ù–ò–ï –¢–û–ö–ï–ù–ê: –°–æ—Ö—Ä–∞–Ω—è–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      if (response.data.token) {
        this.setAuthToken(response.data.token);
        console.log('üîë Auth token saved to storage');
      }

      return {
        success: true,
        token: response.data.token,
        user: response.data.user
      };

    } catch (error: any) {
      console.error('‚ùå Telegram Widget authentication failed:', error);
      
      // –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö: –†–∞–∑–ª–∏—á–∞–µ–º —Ç–∏–ø—ã –æ—à–∏–±–æ–∫ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
      let errorMessage = 'Telegram Widget authentication failed';
      
      if (error.response) {
        const status = error.response.status;
        const data = error.response.data;
        
        console.error('üìä Error details:', { status, data });
        
        if (status === 401) {
          errorMessage = data?.error || 'Invalid authentication data';
        } else if (status === 400) {
          errorMessage = data?.error || 'Invalid request data';
        } else if (status >= 500) {
          errorMessage = 'Server error, please try again later';
        }
      } else if (error.request) {
        errorMessage = 'Network error: cannot connect to server';
      }

      return { 
        success: false, 
        error: errorMessage 
      };
    }
  }

  /**
   * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
   */
  logout(): void {
    localStorage.removeItem('auth_token');
    delete apiClient.defaults.headers.common['Authorization'];
    console.log('üö™ User logged out');
    
    if (Environment.isTelegram() && (window as any).Telegram?.WebApp) {
      // (window as any).Telegram.WebApp.close(); // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
   */
  hasStoredToken(): boolean {
    return !!localStorage.getItem('auth_token');
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  setAuthToken(token: string): void {
    localStorage.setItem('auth_token', token);
    apiClient.defaults.headers.common['Authorization'] = `Bearer ${token}`;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω
   */
  getToken(): string | null {
    return localStorage.getItem('auth_token');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   */
  isAuthenticated(): boolean {
    return this.hasStoredToken();
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
export const authService = new AuthService();