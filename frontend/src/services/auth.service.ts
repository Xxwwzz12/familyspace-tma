// frontend/src/services/auth.service.ts

import { Environment } from '../utils/environment';
import { apiClient } from '../utils/apiClient';

export interface AuthResult {
  success: boolean;
  token?: string;
  user?: any;
  error?: string;
}

// –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
export class AuthError extends Error {
  constructor(
    message: string,
    public readonly context?: Record<string, any>
  ) {
    super(message);
    this.name = 'AuthError';
  }
}

export class AuthService {
  constructor() {
    this.initializeAuth();
  }

  private initializeAuth(): void {
    const storedToken = localStorage.getItem('auth_token');
    if (storedToken) {
      this.setAuthToken(storedToken);
      console.log('üîë Restored auth token from storage');
    }
  }

  async authenticate(): Promise<AuthResult> {
    console.log('üîê Starting authentication in environment:', Environment.getEnvironment());
    
    if (Environment.isTelegram()) {
      return await this.authenticateTelegram();
    } else {
      return {
        success: false,
        error: 'Use Telegram Login Widget for browser authentication'
      };
    }
  }

  /**
   * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram Mini App
   */
  private async authenticateTelegram(): Promise<AuthResult> {
    try {
      const authParams = Environment.getAuthParams();
      
      if (!authParams.initData) {
        return {
          success: false,
          error: 'No initData available in Telegram environment'
        };
      }

      console.log('üì± Authenticating via Telegram Mini App...');
      
      // üü¢ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ü–£–¢–¨
      const response = await apiClient.post('/api/auth/init', { 
        initData: authParams.initData 
      });
      
      console.log('‚úÖ Telegram Mini App authentication successful');
      
      if (response.data.token) {
        this.setAuthToken(response.data.token);
      }
      
      return {
        success: true,
        token: response.data.token,
        user: response.data.user
      };
    } catch (error: any) {
      console.error('‚ùå Telegram Mini App authentication failed:', error);
      
      // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      const errorMessage = this.getErrorMessage(error);
      
      return {
        success: false,
        error: errorMessage
      };
    }
  }

  /**
   * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram Login Widget
   */
  async authenticateTelegramWidget(widgetData: any): Promise<AuthResult> {
    try {
      console.log('üîê Processing Telegram Widget auth data:', {
        id: widgetData.id,
        first_name: widgetData.first_name,
        username: widgetData.username,
        auth_date: new Date(widgetData.auth_date * 1000).toISOString()
      });

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (!widgetData.id || !widgetData.auth_date || !widgetData.hash) {
        const error = 'Missing required Telegram Widget fields: id, auth_date, hash';
        console.error('‚ùå', error, widgetData);
        return { success: false, error };
      }

      // üü¢ –û–°–ù–û–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—É—Ç—å API
      const response = await apiClient.post('/api/auth/telegram-widget', {
        authData: widgetData
      });

      console.log('‚úÖ Telegram Widget backend response:', response.data);

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
      if (response.data.token) {
        this.setAuthToken(response.data.token);
        console.log('üîë Auth token saved to storage');
      }

      return {
        success: true,
        token: response.data.token,
        user: response.data.user
      };

    } catch (error: any) {
      console.error('‚ùå Telegram Widget authentication failed:', error);
      
      // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
      const errorMessage = this.getErrorMessage(error);
      
      return { 
        success: false, 
        error: errorMessage 
      };
    }
  }

  /**
   * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API :cite[3]:cite[10]
   */
  private getErrorMessage(error: any): string {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ error —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º Error :cite[10]
    if (error instanceof Error) {
      console.error('Stack trace:', error.stack);
    }
    
    if (error.response) {
      // –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ —Å –æ—Ç–≤–µ—Ç–æ–º
      const status = error.response.status;
      const data = error.response.data;
      
      console.error('üìä API Error details:', { status, data });
      
      if (status === 401) {
        return data?.error || 'Invalid authentication data';
      } else if (status === 400) {
        return data?.error || 'Invalid request data';
      } else if (status === 404) {
        return 'Authentication service not found';
      } else if (status >= 500) {
        return 'Server error, please try again later';
      }
    } else if (error.request) {
      // –ó–∞–ø—Ä–æ—Å –±—ã–ª —Å–¥–µ–ª–∞–Ω, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω
      return 'Network error: cannot connect to server';
    }
    
    // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞
    return error.message || 'Authentication failed';
  }

  /**
   * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
   */
  logout(): void {
    localStorage.removeItem('auth_token');
    delete apiClient.defaults.headers.common['Authorization'];
    console.log('üö™ User logged out');
    
    if (Environment.isTelegram() && (window as any).Telegram?.WebApp) {
      // (window as any).Telegram.WebApp.close();
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
   */
  hasStoredToken(): boolean {
    return !!localStorage.getItem('auth_token');
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  setAuthToken(token: string): void {
    localStorage.setItem('auth_token', token);
    apiClient.defaults.headers.common['Authorization'] = `Bearer ${token}`;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω
   */
  getToken(): string | null {
    return localStorage.getItem('auth_token');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   */
  isAuthenticated(): boolean {
    return this.hasStoredToken();
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
export const authService = new AuthService();