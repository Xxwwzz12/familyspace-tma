import { useMemo } from 'react';

interface TelegramUser {
  id: number;
  first_name: string;
  last_name?: string;
  username?: string;
  language_code?: string;
  is_premium?: boolean;
  allows_write_to_pm?: boolean;
}

interface InitDataUnsafe {
  user?: TelegramUser;
  query_id?: string;
  auth_date?: number;
  hash?: string;
}

export const useTelegram = () => {
  const isTelegramEnv = useMemo(() => {
    return typeof window !== 'undefined' && 
           typeof window.Telegram !== 'undefined' && 
           typeof window.Telegram.WebApp !== 'undefined';
  }, []);

  const expandViewport = () => {
    if (isTelegramEnv && window.Telegram?.WebApp) {
      try {
        window.Telegram.WebApp.ready();
        window.Telegram.WebApp.expand();
        console.log('‚úÖ Viewport expanded successfully');
      } catch (error) {
        console.error('expandViewport failed:', error);
      }
    }
  };

  // –ü–æ–ª—É—á–∞–µ–º raw —Å—Ç—Ä–æ–∫—É initData –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const initDataRaw = isTelegramEnv ? window.Telegram?.WebApp?.initData || '' : '';

  // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è UI
  const initDataUnsafe = isTelegramEnv ? 
    (window.Telegram?.WebApp?.initDataUnsafe as InitDataUnsafe | undefined) : 
    undefined;

  const userData = initDataUnsafe?.user || null;
  const webApp = isTelegramEnv ? window.Telegram?.WebApp || null : null;

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log('üì± useTelegram hook. isTelegramEnv:', isTelegramEnv);
  console.log('üîê InitDataRaw (–¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏):', initDataRaw ? `present (${initDataRaw.length} chars)` : 'empty');
  console.log('üë§ User data:', userData);
  console.log('üåê WebApp:', webApp);

  return {
    isTelegramEnv,
    expandViewport,
    initDataRaw,    // —Å—Ç—Ä–æ–∫–∞ –¥–ª—è auth/init –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
    initDataUnsafe, // –æ–±—ä–µ–∫—Ç –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ UI
    userData,
    webApp
  };
};

export default useTelegram;