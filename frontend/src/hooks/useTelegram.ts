import { useEffect, useState, useMemo, useCallback } from 'react';

interface TelegramUser {
  id: number;
  first_name: string;
  last_name?: string;
  username?: string;
  language_code?: string;
  is_premium?: boolean;
  allows_write_to_pm?: boolean;
}

interface InitDataUnsafe {
  user?: TelegramUser;
  query_id?: string;
  auth_date?: number;
  hash?: string;
}

interface DebugTelegramData {
  initData: string;
  initDataUnsafe: any;
  version: string;
  platform: string;
  rawParams: Record<string, string>;
  timestamp: string;
  userAgent: string;
}

// üîß –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ initData
function parseInitData(initData: string): Record<string, string> {
  if (!initData) return {};
  
  const params = new URLSearchParams(initData);
  const result: Record<string, string> = {};
  
  for (const [key, value] of params.entries()) {
    result[key] = value;
  }
  
  return result;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
const saveTelegramDiagnostics = (webApp: any) => {
  if (!webApp) return;

  const initData = webApp.initData || '';
  const initDataUnsafe = webApp.initDataUnsafe || {};
  const version = webApp.version || 'unknown';
  const platform = webApp.platform || 'unknown';
  
  const debugData: DebugTelegramData = {
    initData,
    initDataUnsafe,
    version,
    platform,
    rawParams: parseInitData(initData),
    timestamp: new Date().toISOString(),
    userAgent: navigator.userAgent
  };

  // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  (window as any).debugTelegram = debugData;

  // üíæ –†–µ–∑–µ—Ä–≤–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
  try {
    localStorage.setItem('debug_telegram_data', JSON.stringify(debugData, null, 2));
    localStorage.setItem('debug_telegram_initData', initData);
    localStorage.setItem('debug_telegram_version', version);
    localStorage.setItem('debug_telegram_platform', platform);
    localStorage.setItem('debug_telegram_timestamp', debugData.timestamp);
  } catch (e) {
    console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ localStorage:', e);
  }

  console.log('üíæ –î–∞–Ω–Ω—ã–µ Telegram —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', debugData);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ Telegram SDK
const waitForTelegramSDK = (timeout = 3000): Promise<boolean> => {
  return new Promise((resolve) => {
    if (typeof window !== 'undefined' && window.Telegram && window.Telegram.WebApp) {
      console.log('‚úÖ Telegram SDK already loaded');
      return resolve(true);
    }

    console.log('‚è≥ Waiting for Telegram SDK to load...');

    const checkInterval = setInterval(() => {
      if (typeof window !== 'undefined' && window.Telegram && window.Telegram.WebApp) {
        clearInterval(checkInterval);
        console.log('‚úÖ Telegram SDK loaded successfully');
        resolve(true);
      }
    }, 100);

    setTimeout(() => {
      clearInterval(checkInterval);
      console.warn('‚ö†Ô∏è Telegram SDK loading timeout');
      resolve(false);
    }, timeout);
  });
};

export const useTelegram = () => {
  const [isSDKReady, setIsSDKReady] = useState(false);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    let mounted = true;

    const initSDK = async () => {
      setIsLoading(true);
      try {
        const ready = await waitForTelegramSDK();
        if (mounted) {
          setIsSDKReady(ready);
        }
      } catch (error) {
        console.error('Error loading Telegram SDK:', error);
        if (mounted) {
          setIsSDKReady(false);
        }
      } finally {
        if (mounted) {
          setIsLoading(false);
        }
      }
    };

    initSDK();

    return () => {
      mounted = false;
    };
  }, []);

  const isTelegramEnv = useMemo(() => {
    return isSDKReady && 
           typeof window.Telegram !== 'undefined' && 
           typeof window.Telegram.WebApp !== 'undefined';
  }, [isSDKReady]);

  // üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ Telegram –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  useEffect(() => {
    if (isTelegramEnv && window.Telegram?.WebApp) {
      saveTelegramDiagnostics(window.Telegram.WebApp);
    }
  }, [isTelegramEnv]);

  const expandViewport = () => {
    if (isTelegramEnv && window.Telegram?.WebApp) {
      try {
        window.Telegram.WebApp.ready();
        window.Telegram.WebApp.expand();
        console.log('‚úÖ Viewport expanded successfully');
      } catch (error) {
        console.error('expandViewport failed:', error);
      }
    }
  };

  // –ü–æ–ª—É—á–∞–µ–º raw —Å—Ç—Ä–æ–∫—É initData –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const initData = isTelegramEnv ? window.Telegram?.WebApp?.initData || '' : '';

  // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è UI
  const initDataUnsafe = isTelegramEnv ? 
    (window.Telegram?.WebApp?.initDataUnsafe as InitDataUnsafe | undefined) : 
    undefined;

  const userData = initDataUnsafe?.user || null;
  const webApp = isTelegramEnv ? window.Telegram?.WebApp || null : null;

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è initData –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  const getInitDataForAuth = useCallback(() => {
    if (!isTelegramEnv) {
      console.log('üîç Not in Telegram environment, returning empty initData');
      return '';
    }

    const rawInitData = window.Telegram?.WebApp?.initData || '';
    
    // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('üîç Raw initData for auth:', rawInitData);
    console.log('üìè InitData length:', rawInitData.length);
    console.log('üî¢ InitData character count:', rawInitData.split('').length);
    console.log('üìã InitData segments:', rawInitData.split('&').length);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã
    if (rawInitData) {
      const hashIndex = rawInitData.indexOf('hash=');
      if (hashIndex !== -1) {
        console.log('‚úÖ Hash found in initData at position:', hashIndex);
      } else {
        console.warn('‚ö†Ô∏è Hash not found in initData');
      }
    }
    
    return rawInitData;
  }, [isTelegramEnv]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  const getDiagnostics = useCallback((): DebugTelegramData | null => {
    if (typeof window === 'undefined') return null;
    
    return (window as any).debugTelegram || null;
  }, []);

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log('üì± useTelegram hook:', {
    isLoading,
    isSDKReady,
    isTelegramEnv,
    initDataLength: initData?.length || 0,
    hasUserData: !!userData,
    diagnostics: getDiagnostics() ? 'available' : 'unavailable'
  });

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    isLoading,
    isSDKReady,
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    isTelegramEnv,
    expandViewport,
    
    // –î–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    initData,        // —Å—Ç—Ä–æ–∫–∞ –¥–ª—è auth/init –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
    initDataUnsafe,  // –æ–±—ä–µ–∫—Ç –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ UI
    userData,
    
    // WebApp —ç–∫–∑–µ–º–ø–ª—è—Ä
    webApp,
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è initData —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    getInitDataForAuth,
    
    // üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    getDiagnostics,
    hasDiagnostics: !!getDiagnostics()
  };
};

export default useTelegram;