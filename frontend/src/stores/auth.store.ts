import { create } from 'zustand';
import { persist } from 'zustand/middleware';
import { authService, AuthResult } from '../services/auth.service';
import { Environment } from '../utils/environment';

interface User {
  id: string;
  firstName: string;
  lastName: string | null;
  username: string | null;
}

interface AuthState {
  user: User | null;
  token: string | null;
  isAuthenticated: boolean;
  isInitialized: boolean;
  isLoading: boolean;
  authMethod: 'telegram' | 'widget' | 'none';
  error: string | null;
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  initializeAuth: () => Promise<void>;
  loginWithTelegramWidget: (authData: any) => Promise<AuthResult>;
  logout: () => void;
  clearError: () => void;
  
  // –°–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  setUser: (user: User | null) => void;
  setToken: (token: string | null) => void;
  setIsAuthenticated: (isAuthenticated: boolean) => void;
  setIsInitialized: (isInitialized: boolean) => void;
  setIsLoading: (isLoading: boolean) => void;
}

export const useAuthStore = create<AuthState>()(
  persist(
    (set, get) => ({
      user: null,
      token: null,
      isAuthenticated: false,
      isInitialized: false,
      isLoading: false,
      authMethod: 'none',
      error: null,

      // üîÑ –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–ü–ò–°–ê–ù–ù–´–ô –ú–ï–¢–û–î –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò
      initializeAuth: async () => {
        console.log('üîÑ Starting auth initialization...');
        set({ isLoading: true, error: null });
        
        try {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
          const result = await authService.authenticate();
          
          if (result.success) {
            console.log('‚úÖ Authentication successful via:', Environment.getEnvironment());
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            if (result.token) {
              authService.setAuthToken(result.token);
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            const authMethod = Environment.isTelegram() ? 'telegram' : 'widget';
            
            set({
              user: result.user,
              token: result.token,
              isAuthenticated: true,
              authMethod,
              error: null,
              isLoading: false,
              isInitialized: true
            });
            
            console.log(`üîê Authenticated via ${authMethod}, user:`, result.user);
          } else {
            console.log('‚ö†Ô∏è Authentication required:', result.error);
            
            set({
              error: result.error || 'Authentication required',
              authMethod: 'none',
              isLoading: false,
              isInitialized: true
            });
          }
        } catch (error: any) {
          console.error('‚ùå Auth initialization error:', error);
          
          set({
            error: error.message || 'Initialization failed',
            authMethod: 'none',
            isLoading: false,
            isInitialized: true
          });
        }
      },

      // üÜï –ú–ï–¢–û–î –î–õ–Ø TELEGRAM WIDGET –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò
      loginWithTelegramWidget: async (authData: any): Promise<AuthResult> => {
        console.log('üåê Starting Telegram Widget authentication...');
        set({ isLoading: true, error: null });
        
        try {
          const result = await authService.authenticateTelegramWidget(authData);
          
          if (result.success) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (result.token) {
              authService.setAuthToken(result.token);
            }
            
            set({
              user: result.user,
              token: result.token,
              isAuthenticated: true,
              authMethod: 'widget',
              error: null,
              isLoading: false
            });
            
            console.log('‚úÖ Telegram Widget authentication successful');
          } else {
            set({
              error: result.error || 'Widget authentication failed',
              isLoading: false
            });
          }
          
          return result;
        } catch (error: any) {
          console.error('‚ùå Telegram Widget authentication error:', error);
          
          const result: AuthResult = {
            success: false,
            error: error.message || 'Widget authentication failed'
          };
          
          set({
            error: result.error,
            isLoading: false
          });
          
          return result;
        }
      },

      // üÜï –ú–ï–¢–û–î –í–´–•–û–î–ê
      logout: () => {
        console.log('üö™ Logging out user...');
        
        // –í—ã–∑—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤
        authService.logout();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        set({
          user: null,
          token: null,
          isAuthenticated: false,
          authMethod: 'none',
          error: null,
          isLoading: false
        });
        
        console.log('‚úÖ User logged out');
      },

      // üÜï –ú–ï–¢–û–î –î–õ–Ø –û–ß–ò–°–¢–ö–ò –û–®–ò–ë–û–ö
      clearError: () => {
        set({ error: null });
      },

      // üîÑ –°–ï–¢–¢–ï–†–´ –î–õ–Ø –û–ë–†–ê–¢–ù–û–ô –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
      setUser: (user: User | null) => {
        console.log('üë§ setUser called with:', user);
        set({ user });
      },

      setToken: (token: string | null) => {
        console.log('üîë setToken called with:', token);
        
        if (token) {
          authService.setAuthToken(token);
        }
        
        set({ token });
      },

      setIsAuthenticated: (isAuthenticated: boolean) => {
        console.log('üîê setIsAuthenticated called with:', isAuthenticated);
        set({ isAuthenticated });
      },

      setIsInitialized: (isInitialized: boolean) => {
        console.log('üèÅ setIsInitialized called with:', isInitialized);
        set({ isInitialized });
      },

      setIsLoading: (isLoading: boolean) => {
        console.log('‚è≥ setIsLoading called with:', isLoading);
        set({ isLoading });
      },
    }),
    {
      name: 'auth-storage',
      onRehydrateStorage: () => (state) => {
        console.log('üíæ Storage rehydrated', state);
        
        // –ü—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ —Å–µ—Ä–≤–∏—Å, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (state && state.token) {
          authService.setAuthToken(state.token);
        }
        
        if (state && typeof state === 'object') {
          return { 
            ...state, 
            isLoading: false,
            error: null
          };
        }
        return state;
      },
      partialize: (state) => ({
        user: state.user,
        token: state.token,
        isAuthenticated: state.isAuthenticated,
        isInitialized: state.isInitialized,
        authMethod: state.authMethod
      }),
      merge: (persistedState, currentState) => {
        if (persistedState && typeof persistedState === 'object') {
          return {
            ...currentState,
            ...persistedState,
            initializeAuth: currentState.initializeAuth,
            loginWithTelegramWidget: currentState.loginWithTelegramWidget,
            logout: currentState.logout,
            clearError: currentState.clearError,
            setUser: currentState.setUser,
            setToken: currentState.setToken,
            setIsAuthenticated: currentState.setIsAuthenticated,
            setIsInitialized: currentState.setIsInitialized,
            setIsLoading: currentState.setIsLoading
          };
        }
        return currentState;
      }
    }
  )
);