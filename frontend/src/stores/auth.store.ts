import { create } from 'zustand';
import { persist } from 'zustand/middleware';
import { apiClient } from '../utils/apiClient';

interface User {
  id: string;
  firstName: string;
  lastName: string | null;
  username: string | null;
}

interface AuthState {
  token: string | null;
  user: User | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  isInitialized: boolean; // –î–æ–±–∞–≤–ª–µ–Ω–æ: —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  error: string | null;
  initializeAuth: (initDataRaw: string | null) => Promise<void>;
  login: (user: User, token: string) => void;
  logout: () => void;
  testAuth: () => Promise<void>;
  setToken: (token: string | null) => void;
  setUser: (user: User | null) => void;
  clearError: () => void;
  setInitialized: (initialized: boolean) => void; // –î–æ–±–∞–≤–ª–µ–Ω–æ: –º–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ isInitialized
}

export const useAuthStore = create<AuthState>()(
  persist(
    (set) => ({
      token: null,
      user: null,
      isAuthenticated: false,
      isLoading: true,
      isInitialized: false, // –ù–∞—á–∏–Ω–∞–µ–º —Å false
      error: null,

      /**
       * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       * @param initDataRaw - –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Web App –∏–ª–∏ null –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
       */
      initializeAuth: async (initDataRaw: string | null) => {
        console.log('üîÑ initializeAuth called with initDataRaw:', initDataRaw);
        set({ isLoading: true, error: null });
        
        try {
          console.log('üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞');
          
          // üî¥ –í–†–ï–ú–ï–ù–ù–û: –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–∑–æ–≤ API
          // const response = await apiClient.post('/auth/init', { 
          //   initData: initDataRaw 
          // });
          
          // üü¢ –í–†–ï–ú–ï–ù–ù–û: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          console.log('üîß –í–†–ï–ú–ï–ù–ù–û: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
          
          const testUser = {
            id: '303987836',
            firstName: '–ï–≥–æ—Ä',
            lastName: '–ì—É—Ä–µ–≤–∏—á',
            username: 'gurevichegor'
          };
          
          const testToken = 'test-token-' + Date.now();
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
          if (typeof window !== 'undefined') {
            localStorage.setItem('auth_token', testToken);
          }
          
          set({ 
            user: testUser, 
            token: testToken,
            isAuthenticated: true, 
            isLoading: false,
            isInitialized: true, // üü¢ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å isInitialized
            error: null
          });
          
          console.log('‚úÖ –í–†–ï–ú–ï–ù–ù–û: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');

          // üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
          if (typeof window !== 'undefined') {
            (window as any).debugAuth = {
              status: 'AUTH_DISABLED_TEMPORARILY_WITH_INIT',
              user: testUser,
              initData: initDataRaw,
              timestamp: new Date().toISOString(),
              storeState: 'TEST_USER_SET_AND_INITIALIZED'
            };
          }
        } catch (error: any) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
          
          // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
          console.log('üîß –í–†–ï–ú–ï–ù–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏');
          const testUser = {
            id: '303987836',
            firstName: '–ï–≥–æ—Ä',
            lastName: '–ì—É—Ä–µ–≤–∏—á',
            username: 'gurevichegor'
          };
          
          const testToken = 'test-token-' + Date.now();
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
          if (typeof window !== 'undefined') {
            localStorage.setItem('auth_token', testToken);
          }
          
          set({ 
            user: testUser, 
            token: testToken,
            isAuthenticated: true, 
            isLoading: false,
            isInitialized: true, // üü¢ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å isInitialized –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            error: null
          });
          
          console.log('‚úÖ –í–†–ï–ú–ï–ù–ù–û: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏:', testUser);

          // üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
          if (typeof window !== 'undefined') {
            (window as any).debugAuth = {
              status: 'AUTH_ERROR_BUT_INITIALIZED',
              user: testUser,
              initData: initDataRaw,
              timestamp: new Date().toISOString(),
              error: error.message,
              storeState: 'TEST_USER_SET_DUE_TO_ERROR_AND_INITIALIZED'
            };
          }
        }
      },

      /**
       * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é (–±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Telegram –¥–∞–Ω–Ω—ã—Ö)
       */
      testAuth: async () => {
        console.log('üõú testAuth called');
        set({ isLoading: true, error: null });
        
        try {
          // üî¥ –í–†–ï–ú–ï–ù–ù–û: –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–∑–æ–≤ API
          console.log('üîß –í–†–ï–ú–ï–ù–ù–û: –¢–µ—Å—Ç–æ–≤–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
          
          // üü¢ –í–†–ï–ú–ï–ù–ù–û: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const testUser = {
            id: '303987836',
            firstName: '–ï–≥–æ—Ä',
            lastName: '–ì—É—Ä–µ–≤–∏—á',
            username: 'gurevichegor'
          };
          
          const testToken = 'test-token-' + Date.now();
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
          if (typeof window !== 'undefined') {
            localStorage.setItem('auth_token', testToken);
          }
          
          set({ 
            user: testUser, 
            token: testToken,
            isAuthenticated: true, 
            isLoading: false,
            isInitialized: true, // üü¢ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å isInitialized
            error: null
          });
          
          console.log('‚úÖ –í–†–ï–ú–ï–ù–ù–û: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á–µ—Ä–µ–∑ testAuth:', testUser);

          // üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
          if (typeof window !== 'undefined') {
            (window as any).debugAuth = {
              status: 'TEST_AUTH_DISABLED_TEMPORARILY_WITH_INIT',
              user: testUser,
              timestamp: new Date().toISOString(),
              storeState: 'TEST_USER_SET_VIA_TEST_AUTH_AND_INITIALIZED'
            };
          }
        } catch (error: any) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
          
          // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
          console.log('üîß –í–†–ï–ú–ï–ù–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
          const testUser = {
            id: '303987836',
            firstName: '–ï–≥–æ—Ä',
            lastName: '–ì—É—Ä–µ–≤–∏—á',
            username: 'gurevichegor'
          };
          
          const testToken = 'test-token-' + Date.now();
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
          if (typeof window !== 'undefined') {
            localStorage.setItem('auth_token', testToken);
          }
          
          set({ 
            user: testUser, 
            token: testToken,
            isAuthenticated: true, 
            isLoading: false,
            isInitialized: true, // üü¢ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å isInitialized –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            error: null
          });
          
          console.log('‚úÖ –í–†–ï–ú–ï–ù–ù–û: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', testUser);

          // üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
          if (typeof window !== 'undefined') {
            (window as any).debugAuth = {
              status: 'TEST_AUTH_ERROR_BUT_INITIALIZED',
              user: testUser,
              timestamp: new Date().toISOString(),
              error: error.message,
              storeState: 'TEST_USER_SET_DUE_TO_TEST_ERROR_AND_INITIALIZED'
            };
          }
        }
      },

      /**
       * –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º—É
       * @param user - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       * @param token - JWT —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
       */
      login: (user: User, token: string) => {
        console.log('üîê login action called with user:', user);
        
        if (typeof window !== 'undefined') {
          localStorage.setItem('auth_token', token);
        }
        
        set({ 
          user, 
          token,
          isAuthenticated: true,
          isLoading: false,
          isInitialized: true, // –ü—Ä–∏ –ª–æ–≥–∏–Ω–µ —Ç–æ–∂–µ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ
          error: null
        });
      },

      /**
       * –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã
       */
      logout: () => {
        console.log('üö™ logout action called');
        
        if (typeof window !== 'undefined') {
          localStorage.removeItem('auth_token');
        }
        
        set({ 
          user: null, 
          token: null,
          isAuthenticated: false,
          isLoading: false,
          isInitialized: true, // –ü—Ä–∏ –ª–æ–≥–∞—É—Ç–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º isInitialized = true, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
          error: null
        });
      },

      /**
       * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
       * @param token - JWT —Ç–æ–∫–µ–Ω –∏–ª–∏ null –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
       */
      setToken: (token: string | null) => {
        console.log('üîë setToken called with:', token);
        
        if (token && typeof window !== 'undefined') {
          localStorage.setItem('auth_token', token);
        } else if (typeof window !== 'undefined') {
          localStorage.removeItem('auth_token');
        }
        
        set({ token, error: null });
      },

      /**
       * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       * @param user - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ null –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
       */
      setUser: (user: User | null) => {
        console.log('üë§ setUser called with:', user);
        set({ user, error: null });
      },

      /**
       * –û—á–∏—â–∞–µ—Ç –æ—à–∏–±–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
       */
      clearError: () => {
        console.log('üßπ Clearing error');
        set({ error: null });
      },

      /**
       * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
       * @param initialized - true –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
       */
      setInitialized: (initialized: boolean) => {
        console.log('üèÅ setInitialized called with:', initialized);
        set({ isInitialized: initialized });
      },
    }),
    {
      name: 'auth-storage',
      onRehydrateStorage: () => (state) => {
        console.log('üíæ Storage rehydrated', state);
        if (state && typeof state === 'object') {
          // –ü—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ
          return { ...state, isLoading: false, isInitialized: true, error: null };
        }
        return state;
      },
      partialize: (state) => ({
        token: state.token,
        user: state.user,
        isInitialized: state.isInitialized // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      }),
      merge: (persistedState, currentState) => {
        if (persistedState && typeof persistedState === 'object') {
          return {
            ...currentState,
            ...persistedState,
            initializeAuth: currentState.initializeAuth,
            login: currentState.login,
            logout: currentState.logout,
            testAuth: currentState.testAuth,
            setToken: currentState.setToken,
            setUser: currentState.setUser,
            clearError: currentState.clearError,
            setInitialized: currentState.setInitialized
          };
        }
        return currentState;
      }
    }
  )
);