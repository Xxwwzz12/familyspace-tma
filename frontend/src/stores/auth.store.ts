import { create } from 'zustand';
import { persist } from 'zustand/middleware';
import { apiClient } from '../utils/apiClient';

interface User {
  id: string;
  firstName: string;
  lastName: string | null;
  username: string | null;
}

interface AuthState {
  token: string | null;
  user: User | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  error: string | null;
  initializeAuth: (initDataRaw: string | null) => Promise<void>;
  login: (user: User, token: string) => void;
  logout: () => void;
  testAuth: () => Promise<void>;
  setToken: (token: string | null) => void;
  setUser: (user: User | null) => void;
  clearError: () => void;
}

export const useAuthStore = create<AuthState>()(
  persist(
    (set) => ({
      token: null,
      user: null,
      isAuthenticated: false,
      isLoading: true,
      error: null,

      /**
       * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       * @param initDataRaw - –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Web App –∏–ª–∏ null –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
       */
      initializeAuth: async (initDataRaw: string | null) => {
        console.log('üîÑ initializeAuth called with initDataRaw:', initDataRaw);
        set({ isLoading: true, error: null });
        
        try {
          let response;
          
          if (initDataRaw) {
            // üü¢ –†–ê–°–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ API
            console.log('üîê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –Ω–∞ –±—ç–∫–µ–Ω–¥...');
            console.log('üì§ Sending initData length:', initDataRaw.length);
            
            response = await apiClient.post('/auth/init', { 
              initData: initDataRaw 
            });
            
            console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç –±—ç–∫–µ–Ω–¥–∞:', response);
          } else {
            // –¢–µ—Å—Ç–æ–≤–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (fallback)
            console.log('üß™ Using test authentication (initDataRaw is null)');
            response = await apiClient.post('/auth/test');
          }
          
          const { user, token } = response.data;
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
          if (typeof window !== 'undefined') {
            localStorage.setItem('auth_token', token);
          }
          
          set({ 
            user, 
            token,
            isAuthenticated: true, 
            isLoading: false,
            error: null
          });
          
          console.log('‚úÖ Authentication successful:', user);

          // üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
          if (typeof window !== 'undefined') {
            (window as any).debugAuth = {
              status: 'AUTH_SUCCESS',
              user: user,
              initData: initDataRaw,
              timestamp: new Date().toISOString(),
              storeState: 'AUTHENTICATED_VIA_BACKEND'
            };
          }
        } catch (error: any) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
          
          // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏
          if (error.response) {
            console.error('üìä –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
              status: error.response.status,
              data: error.response.data,
              headers: error.response.headers
            });
            
            const status = error.response.status;
            const message = error.response.data?.message || error.response.statusText;
            
            console.log(`‚öôÔ∏è Server error ${status}:`, message);
            
            if (status === 401) {
              console.log('üîê InitData validation failed on server');
              set({ error: 'Authentication failed: Invalid credentials' });
            } else if (status === 400) {
              console.log('üìù Bad request: Invalid initData format');
              set({ error: 'Authentication failed: Invalid request format' });
            } else if (status === 500) {
              console.log('‚öôÔ∏è Server error during authentication');
              set({ error: 'Authentication failed: Server error' });
            } else {
              set({ error: `Authentication failed: ${message}` });
            }
          } else if (error.request) {
            // –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ (–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞)
            console.log('üåê Network error: No response from server');
            set({ error: 'Authentication failed: Network error - please check your connection' });
          } else {
            // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
            console.log('‚ùì Other error:', error.message);
            set({ error: `Authentication failed: ${error.message}` });
          }
          
          // üî¥ –í–†–ï–ú–ï–ù–ù–û: –≤—Å–µ —Ä–∞–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          // —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É
          console.log('üîß –í–†–ï–ú–ï–ù–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏');
          const testUser = {
            id: '303987836',
            firstName: '–ï–≥–æ—Ä',
            lastName: '–ì—É—Ä–µ–≤–∏—á',
            username: 'gurevichegor'
          };
          
          const testToken = 'test-token-' + Date.now();
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
          if (typeof window !== 'undefined') {
            localStorage.setItem('auth_token', testToken);
          }
          
          set({ 
            user: testUser, 
            token: testToken,
            isAuthenticated: true, 
            isLoading: false
          });
          
          console.log('‚úÖ –í–†–ï–ú–ï–ù–ù–û: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏:', testUser);

          // üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
          if (typeof window !== 'undefined') {
            (window as any).debugAuth = {
              status: 'AUTH_FAILED_BUT_TEST_USER_SET',
              user: testUser,
              initData: initDataRaw,
              timestamp: new Date().toISOString(),
              error: error.message,
              storeState: 'TEST_USER_SET_DUE_TO_ERROR'
            };
          }
        }
      },

      /**
       * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é (–±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Telegram –¥–∞–Ω–Ω—ã—Ö)
       */
      testAuth: async () => {
        console.log('üõú testAuth called');
        set({ isLoading: true, error: null });
        
        try {
          // üü¢ –†–ê–°–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ API
          console.log('üîê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –Ω–∞ –±—ç–∫–µ–Ω–¥...');
          const response = await apiClient.post('/auth/test');
          const { user, token } = response.data;
          
          console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç –±—ç–∫–µ–Ω–¥–∞ (test):', response);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
          if (typeof window !== 'undefined') {
            localStorage.setItem('auth_token', token);
          }
          
          set({ 
            user, 
            token,
            isAuthenticated: true, 
            isLoading: false,
            error: null
          });
          
          console.log('‚úÖ Test authentication successful:', user);

          // üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
          if (typeof window !== 'undefined') {
            (window as any).debugAuth = {
              status: 'TEST_AUTH_SUCCESS',
              user: user,
              timestamp: new Date().toISOString(),
              storeState: 'AUTHENTICATED_VIA_TEST'
            };
          }
        } catch (error: any) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
          
          // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏
          if (error.response) {
            console.error('üìä –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ (test):', {
              status: error.response.status,
              data: error.response.data,
              headers: error.response.headers
            });
            
            const status = error.response.status;
            const message = error.response.data?.message || error.response.statusText;
            set({ error: `Test authentication failed: ${status} - ${message}` });
          } else {
            set({ error: `Test authentication failed: ${error.message}` });
          }
          
          // üî¥ –í–†–ï–ú–ï–ù–ù–û: –≤—Å–µ —Ä–∞–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          console.log('üîß –í–†–ï–ú–ï–ù–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
          const testUser = {
            id: '303987836',
            firstName: '–ï–≥–æ—Ä',
            lastName: '–ì—É—Ä–µ–≤–∏—á',
            username: 'gurevichegor'
          };
          
          const testToken = 'test-token-' + Date.now();
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
          if (typeof window !== 'undefined') {
            localStorage.setItem('auth_token', testToken);
          }
          
          set({ 
            user: testUser, 
            token: testToken,
            isAuthenticated: true, 
            isLoading: false
          });
          
          console.log('‚úÖ –í–†–ï–ú–ï–ù–ù–û: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', testUser);

          // üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
          if (typeof window !== 'undefined') {
            (window as any).debugAuth = {
              status: 'TEST_AUTH_FAILED_BUT_TEST_USER_SET',
              user: testUser,
              timestamp: new Date().toISOString(),
              error: error.message,
              storeState: 'TEST_USER_SET_DUE_TO_TEST_ERROR'
            };
          }
          
          throw error;
        }
      },

      /**
       * –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º—É
       * @param user - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       * @param token - JWT —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
       */
      login: (user: User, token: string) => {
        console.log('üîê login action called with user:', user);
        
        if (typeof window !== 'undefined') {
          localStorage.setItem('auth_token', token);
        }
        
        set({ 
          user, 
          token,
          isAuthenticated: true,
          isLoading: false,
          error: null
        });
      },

      /**
       * –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã
       */
      logout: () => {
        console.log('üö™ logout action called');
        
        if (typeof window !== 'undefined') {
          localStorage.removeItem('auth_token');
        }
        
        set({ 
          user: null, 
          token: null,
          isAuthenticated: false,
          isLoading: false,
          error: null
        });
      },

      /**
       * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
       * @param token - JWT —Ç–æ–∫–µ–Ω –∏–ª–∏ null –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
       */
      setToken: (token: string | null) => {
        console.log('üîë setToken called with:', token);
        
        if (token && typeof window !== 'undefined') {
          localStorage.setItem('auth_token', token);
        } else if (typeof window !== 'undefined') {
          localStorage.removeItem('auth_token');
        }
        
        set({ token, error: null });
      },

      /**
       * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       * @param user - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ null –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
       */
      setUser: (user: User | null) => {
        console.log('üë§ setUser called with:', user);
        set({ user, error: null });
      },

      /**
       * –û—á–∏—â–∞–µ—Ç –æ—à–∏–±–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
       */
      clearError: () => {
        console.log('üßπ Clearing error');
        set({ error: null });
      },
    }),
    {
      name: 'auth-storage',
      onRehydrateStorage: () => (state) => {
        console.log('üíæ Storage rehydrated', state);
        if (state && typeof state === 'object') {
          return { ...state, isLoading: false, error: null };
        }
        return state;
      },
      partialize: (state) => ({
        token: state.token,
        user: state.user
      }),
      merge: (persistedState, currentState) => {
        if (persistedState && typeof persistedState === 'object') {
          return {
            ...currentState,
            ...persistedState,
            initializeAuth: currentState.initializeAuth,
            login: currentState.login,
            logout: currentState.logout,
            testAuth: currentState.testAuth,
            setToken: currentState.setToken,
            setUser: currentState.setUser,
            clearError: currentState.clearError
          };
        }
        return currentState;
      }
    }
  )
);