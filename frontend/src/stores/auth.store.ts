import { create } from 'zustand';
import { persist } from 'zustand/middleware';
import { apiClient } from '../utils/apiClient';

interface User {
  id: string;
  firstName: string;
  lastName: string | null;
  username: string | null;
}

interface AuthState {
  token: string | null;
  user: User | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  error: string | null; // –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è –æ—à–∏–±–æ–∫
  initializeAuth: (initDataRaw: string | null) => Promise<void>;
  login: (user: User, token: string) => void;
  logout: () => void;
  testAuth: () => Promise<void>;
  setToken: (token: string | null) => void;
  setUser: (user: User | null) => void;
  clearError: () => void; // –î–æ–±–∞–≤–ª–µ–Ω –º–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –æ—à–∏–±–æ–∫
}

export const useAuthStore = create<AuthState>()(
  persist(
    (set) => ({
      token: null,
      user: null,
      isAuthenticated: false,
      isLoading: true,
      error: null,

      /**
       * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       * @param initDataRaw - –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Web App –∏–ª–∏ null –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
       */
      initializeAuth: async (initDataRaw: string | null) => {
        console.log('üîÑ initializeAuth called with initDataRaw:', initDataRaw);
        set({ isLoading: true, error: null });
        
        try {
          let response;
          
          if (initDataRaw) {
            // –ù–∞—Å—Ç–æ—è—â–∞—è Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            console.log('üîê Authenticating with Telegram initData');
            console.log('üì§ Sending initData length:', initDataRaw.length);
            
            response = await apiClient.post('/auth/init', { 
              initData: initDataRaw 
            });
          } else {
            // –¢–µ—Å—Ç–æ–≤–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (fallback)
            console.log('üß™ Using test authentication (initDataRaw is null)');
            response = await apiClient.post('/auth/test');
          }
          
          const { user, token } = response.data;
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
          if (typeof window !== 'undefined') {
            localStorage.setItem('auth_token', token);
          }
          
          set({ 
            user, 
            token,
            isAuthenticated: true, 
            isLoading: false,
            error: null
          });
          
          console.log('‚úÖ Authentication successful:', user);
        } catch (error: any) {
          console.error('‚ùå Authentication failed:', error);
          
          // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
          if (error.response) {
            // –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ —Å —Å—Ç–∞—Ç—É—Å–æ–º
            const status = error.response.status;
            const message = error.response.data?.message || error.response.statusText;
            
            console.log(`‚öôÔ∏è Server error ${status}:`, message);
            
            if (status === 401) {
              console.log('üîê InitData validation failed on server');
              set({ error: 'Authentication failed: Invalid credentials' });
            } else if (status === 400) {
              console.log('üìù Bad request: Invalid initData format');
              set({ error: 'Authentication failed: Invalid request format' });
            } else if (status === 500) {
              console.log('‚öôÔ∏è Server error during authentication');
              set({ error: 'Authentication failed: Server error' });
            } else {
              set({ error: `Authentication failed: ${message}` });
            }
          } else if (error.request) {
            // –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ (–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞)
            console.log('üåê Network error: No response from server');
            set({ error: 'Authentication failed: Network error - please check your connection' });
            
            // Fallback: –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø—Ä–∏ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–µ
            console.log('üîÑ Trying fallback to test authentication...');
            try {
              const testResponse = await apiClient.post('/auth/test');
              const { user, token } = testResponse.data;
              
              if (typeof window !== 'undefined') {
                localStorage.setItem('auth_token', token);
              }
              
              set({ 
                user, 
                token,
                isAuthenticated: true, 
                isLoading: false,
                error: null
              });
              
              console.log('‚úÖ Fallback authentication successful');
              return; // –£—Å–ø–µ—à–Ω—ã–π fallback, –≤—ã—Ö–æ–¥–∏–º
            } catch (fallbackError) {
              console.error('‚ùå Fallback authentication also failed:', fallbackError);
              set({ error: 'Authentication failed: Network error and fallback also failed' });
            }
          } else {
            // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
            console.log('‚ùì Other error:', error.message);
            set({ error: `Authentication failed: ${error.message}` });
          }
          
          set({ isLoading: false, isAuthenticated: false });
        }
      },

      /**
       * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é (–±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Telegram –¥–∞–Ω–Ω—ã—Ö)
       */
      testAuth: async () => {
        console.log('üõú testAuth called');
        set({ isLoading: true, error: null });
        
        try {
          const response = await apiClient.post('/auth/test');
          const { user, token } = response.data;
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
          if (typeof window !== 'undefined') {
            localStorage.setItem('auth_token', token);
          }
          
          set({ 
            user, 
            token,
            isAuthenticated: true, 
            isLoading: false,
            error: null
          });
          
          console.log('‚úÖ Test authentication successful:', user);
        } catch (error: any) {
          console.error('‚ùå Test authentication failed:', error);
          
          if (error.response) {
            const status = error.response.status;
            const message = error.response.data?.message || error.response.statusText;
            set({ error: `Test authentication failed: ${status} - ${message}` });
          } else {
            set({ error: `Test authentication failed: ${error.message}` });
          }
          
          set({ isLoading: false });
          throw error;
        }
      },

      /**
       * –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º—É
       * @param user - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       * @param token - JWT —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
       */
      login: (user: User, token: string) => {
        console.log('üîê login action called with user:', user);
        
        if (typeof window !== 'undefined') {
          localStorage.setItem('auth_token', token);
        }
        
        set({ 
          user, 
          token,
          isAuthenticated: true,
          isLoading: false,
          error: null
        });
      },

      /**
       * –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã
       */
      logout: () => {
        console.log('üö™ logout action called');
        
        if (typeof window !== 'undefined') {
          localStorage.removeItem('auth_token');
        }
        
        set({ 
          user: null, 
          token: null,
          isAuthenticated: false,
          isLoading: false,
          error: null
        });
      },

      /**
       * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
       * @param token - JWT —Ç–æ–∫–µ–Ω –∏–ª–∏ null –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
       */
      setToken: (token: string | null) => {
        console.log('üîë setToken called with:', token);
        
        if (token && typeof window !== 'undefined') {
          localStorage.setItem('auth_token', token);
        } else if (typeof window !== 'undefined') {
          localStorage.removeItem('auth_token');
        }
        
        set({ token, error: null });
      },

      /**
       * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       * @param user - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ null –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
       */
      setUser: (user: User | null) => {
        console.log('üë§ setUser called with:', user);
        set({ user, error: null });
      },

      /**
       * –û—á–∏—â–∞–µ—Ç –æ—à–∏–±–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
       */
      clearError: () => {
        console.log('üßπ Clearing error');
        set({ error: null });
      },
    }),
    {
      name: 'auth-storage',
      onRehydrateStorage: () => (state) => {
        console.log('üíæ Storage rehydrated', state);
        if (state && typeof state === 'object') {
          return { ...state, isLoading: false, error: null };
        }
        return state;
      },
      partialize: (state) => ({
        token: state.token,
        user: state.user
      }),
      merge: (persistedState, currentState) => {
        if (persistedState && typeof persistedState === 'object') {
          return {
            ...currentState,
            ...persistedState,
            initializeAuth: currentState.initializeAuth,
            login: currentState.login,
            logout: currentState.logout,
            testAuth: currentState.testAuth,
            setToken: currentState.setToken,
            setUser: currentState.setUser,
            clearError: currentState.clearError
          };
        }
        return currentState;
      }
    }
  )
);