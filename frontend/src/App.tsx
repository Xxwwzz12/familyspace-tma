import { useEffect, useState, useRef } from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import './App.css';
import Layout from './components/Layout';
import OnboardingPage from './pages/OnboardingPage';
import HomePage from './pages/HomePage';
import ErrorBoundary from './components/ErrorBoundary';
import useTelegram from './hooks/useTelegram';
import { useAuthStore } from './stores/auth.store';
import DevelopmentBanner from './components/DevelopmentBanner';
import DebugPanel from './components/DebugPanel';
import DebugInfo from './components/DebugInfo';

function App() {
  const [isInitialized, setIsInitialized] = useState(false);
  const { isTelegramEnv, isSDKReady, initData } = useTelegram();
  const { initializeAuth, isAuthenticated, isLoading } = useAuthStore();
  
  // üîí –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  const initializedRef = useRef(false);

  // üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Eruda —Ç–æ–ª—å–∫–æ –≤ debug —Ä–µ–∂–∏–º–µ
  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const isDebugMode = urlParams.get('debug') === 'true';
    
    if (isDebugMode) {
      console.log('üîß Debug mode activated, initializing Eruda...');
      
      import('eruda')
        .then((erudaModule) => {
          const eruda = erudaModule.default;
          eruda.init();
          console.log('‚úÖ Eruda debug console initialized successfully');
        })
        .catch((error) => {
          console.error('‚ùå Failed to initialize Eruda:', error);
        });
    }
  }, []);

  // üîß –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  useEffect(() => {
    const initializeApp = async () => {
      // üîí –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      if (initializedRef.current) {
        console.log('üîÑ App already initialized, skipping...');
        return;
      }

      console.log('üöÄ Starting app initialization...');
      
      try {
        // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Telegram WebApp
        const webApp = window.Telegram?.WebApp;
        console.log('üì± Telegram WebApp check:', {
          hasTelegram: typeof window.Telegram !== 'undefined',
          hasWebApp: typeof webApp !== 'undefined',
          hasInitData: !!webApp?.initData,
          isTelegramEnv: isTelegramEnv,
          isSDKReady: isSDKReady
        });

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
        if (webApp) {
          try {
            webApp.ready();
            console.log('‚úÖ Telegram WebApp marked as ready');
          } catch (readyError) {
            console.warn('‚ö†Ô∏è Telegram WebApp.ready() failed:', readyError);
          }
        }

        // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        if (isTelegramEnv && initData) {
          console.log('üîê Attempting Telegram authentication...');
          console.log('üìã InitData content:', {
            length: initData?.length || 0,
            first100Chars: initData?.substring(0, 100) + '...'
          });
          
          await initializeAuth(initData);
          console.log('‚úÖ Authentication completed');
        } else {
          console.log('‚ÑπÔ∏è No Telegram WebApp environment, using standalone mode');
          await initializeAuth(null);
          console.log('‚úÖ Standalone mode initialized');
        }

        // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–≥–æ–≤
        initializedRef.current = true;
        setIsInitialized(true);
        
        console.log('üéâ App initialization completed successfully');
        console.log('üîê Final auth status:', { isAuthenticated, isLoading });

      } catch (error) {
        console.error('‚ùå App initialization error:', error);
        console.error('üí• Error details:', {
          message: error.message,
          stack: error.stack,
          name: error.name
        });
        
        // üîí –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        initializedRef.current = true;
        setIsInitialized(true);
      }
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ SDK –≥–æ—Ç–æ–≤
    if (isSDKReady) {
      initializeApp();
    } else {
      console.log('‚è≥ Waiting for Telegram SDK to be ready...');
    }
  }, [isSDKReady, isTelegramEnv, initData, initializeAuth]); // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  // –£–±—Ä–∞–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ useEffect –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Telegram WebApp

  // üîß –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ –ø–æ–∫–∞–∑–∞ loading
  if (!isInitialized || isLoading) {
    console.log('‚è≥ Showing loading state', { isInitialized, isLoading });
    return (
      <div style={{ 
        display: 'flex', 
        justifyContent: 'center', 
        alignItems: 'center', 
        height: '100vh',
        fontSize: '18px'
      }}>
        Loading...
      </div>
    );
  }

  console.log('üéØ Rendering main content', { 
    isAuthenticated, 
    isInitialized, 
    isLoading 
  });

  return (
    <ErrorBoundary>
      <Layout>
        <DevelopmentBanner />
        <Router>
          <Routes>
            <Route path="/" element={
              isAuthenticated ? <HomePage /> : <OnboardingPage />
            } />
            <Route path="/onboarding" element={<OnboardingPage />} />
          </Routes>
        </Router>
        
        {/* üîç –ö–û–ú–ü–û–ù–ï–ù–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò */}
        <DebugInfo />
        
        {/* –£—Å–ª–æ–≤–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ DebugPanel —Ç–æ–ª—å–∫–æ –≤ development —Ä–µ–∂–∏–º–µ */}
        {process.env.NODE_ENV === 'development' && <DebugPanel />}
      </Layout>
    </ErrorBoundary>
  );
}

export default App;