// frontend/src/components/TelegramAuthWidget.tsx
import React, { useEffect, useRef, useState } from 'react';
import { useAuthStore } from '../stores/auth.store';
import './TelegramAuthWidget.css';

interface TelegramAuthWidgetProps {
  onAuthSuccess?: (userData: any) => void;
  onAuthError?: (error: string) => void;
  buttonSize?: 'large' | 'medium' | 'small';
  showUserPhoto?: boolean;
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è Telegram Widget
declare global {
  interface Window {
    TelegramLoginWidget?: {
      dataOnauth?: (user: any) => void;
    };
    onTelegramAuth?: (userData: any) => void;
  }
}

export const TelegramAuthWidget: React.FC<TelegramAuthWidgetProps> = ({
  onAuthSuccess,
  onAuthError,
  buttonSize = 'large',
  showUserPhoto = false
}) => {
  const widgetContainerRef = useRef<HTMLDivElement>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const { loginWithTelegramWidget } = useAuthStore();
  
  // –ì–ª–æ–±–∞–ª—å–Ω—ã–π callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const handleTelegramAuth = async (userData: any) => {
    try {
      console.log('üì® Received Telegram Widget auth data:', userData);
      setIsLoading(true);
      
      const result = await loginWithTelegramWidget(userData);
      
      if (result.success) {
        console.log('‚úÖ Telegram Widget auth successful');
        onAuthSuccess?.(userData);
      } else {
        const errorMsg = result.error || 'Authentication failed';
        console.error('‚ùå Telegram Widget auth failed:', errorMsg);
        setError(errorMsg);
        onAuthError?.(errorMsg);
      }
    } catch (err) {
      const errorMsg = err instanceof Error ? err.message : 'Unexpected authentication error';
      console.error('‚ùå Unexpected auth error:', err);
      setError(errorMsg);
      onAuthError?.(errorMsg);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è callback Telegram
    window.onTelegramAuth = handleTelegramAuth;

    let script: HTMLScriptElement | null = null;
    let widgetDiv: HTMLDivElement | null = null;
    const container = widgetContainerRef.current;

    const initializeWidget = () => {
      if (!container) {
        setError('Widget container not found');
        return;
      }

      try {
        // –û–ß–ò–°–¢–ö–ê: –ê–∫–∫—É—Ä–∞—Ç–Ω–æ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–∏–¥–∂–µ—Ç
        const existingScript = document.getElementById('telegram-widget-script');
        const existingWidget = container.querySelector('.telegram-widget');
        
        if (existingScript?.parentNode) {
          existingScript.parentNode.removeChild(existingScript);
        }
        if (existingWidget?.parentNode) {
          existingWidget.parentNode.removeChild(existingWidget);
        }

        // –°–û–ó–î–ê–ù–ò–ï: –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞
        widgetDiv = document.createElement('div');
        widgetDiv.className = 'telegram-widget';
        container.appendChild(widgetDiv);

        // –ó–ê–ì–†–£–ó–ö–ê: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–∫—Ä–∏–ø—Ç –≤–∏–¥–∂–µ—Ç–∞
        script = document.createElement('script');
        script.id = 'telegram-widget-script';
        script.src = 'https://telegram.org/js/telegram-widget.js?22';
        script.async = true;
        script.setAttribute('data-telegram-login', 'Family_Space_MVP_bot');
        script.setAttribute('data-size', buttonSize);
        script.setAttribute('data-onauth', 'onTelegramAuth(user)');
        script.setAttribute('data-request-access', 'write');
        script.setAttribute('data-userpic', showUserPhoto ? 'true' : 'false');
        
        script.onload = () => {
          console.log('‚úÖ Telegram Widget script loaded successfully');
          setIsLoading(false);
          setError(null);
        };
        
        script.onerror = () => {
          const errorMsg = 'Failed to load Telegram Widget script';
          console.error('‚ùå', errorMsg);
          setError(errorMsg);
          setIsLoading(false);
          onAuthError?.(errorMsg);
        };

        document.body.appendChild(script);
      } catch (err) {
        const errorMsg = err instanceof Error ? err.message : 'Failed to initialize widget';
        console.error('‚ùå Widget initialization error:', err);
        setError(errorMsg);
        setIsLoading(false);
        onAuthError?.(errorMsg);
      }
    };

    // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ DOM
    const timer = setTimeout(initializeWidget, 100);
    
    return () => {
      clearTimeout(timer);
      
      // –ö–û–†–†–ï–ö–¢–ù–ê–Ø –û–ß–ò–°–¢–ö–ê: –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—à–∏ —ç–ª–µ–º–µ–Ω—Ç—ã :cite[6]
      if (script?.parentNode) {
        script.parentNode.removeChild(script);
      }
      
      if (widgetDiv?.parentNode) {
        widgetDiv.parentNode.removeChild(widgetDiv);
      }
      
      // –û—Å—Ç–æ—Ä–æ–∂–Ω–æ —Å –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
      if (window.onTelegramAuth === handleTelegramAuth) {
        delete window.onTelegramAuth;
      }
    };
  }, [loginWithTelegramWidget, onAuthSuccess, onAuthError, buttonSize, showUserPhoto]);

  const reloadWidget = () => {
    setError(null);
    setIsLoading(true);
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à–æ–π —Ç–∞–π–º–∞—É—Ç
    setTimeout(() => {
      const initializeWidget = () => {
        const container = widgetContainerRef.current;
        if (!container) return;

        const existingScript = document.getElementById('telegram-widget-script');
        const existingWidget = container.querySelector('.telegram-widget');
        
        if (existingScript?.parentNode) {
          existingScript.parentNode.removeChild(existingScript);
        }
        if (existingWidget?.parentNode) {
          existingWidget.parentNode.removeChild(existingWidget);
        }

        // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç
        const widgetDiv = document.createElement('div');
        widgetDiv.className = 'telegram-widget';
        container.appendChild(widgetDiv);

        const script = document.createElement('script');
        script.id = 'telegram-widget-script';
        script.src = 'https://telegram.org/js/telegram-widget.js?22';
        script.async = true;
        script.setAttribute('data-telegram-login', 'Family_Space_MVP_bot');
        script.setAttribute('data-size', buttonSize);
        script.setAttribute('data-onauth', 'onTelegramAuth(user)');
        script.setAttribute('data-request-access', 'write');
        script.setAttribute('data-userpic', showUserPhoto ? 'true' : 'false');

        script.onload = () => {
          setIsLoading(false);
          setError(null);
        };

        script.onerror = () => {
          setError('Failed to reload Telegram widget');
          setIsLoading(false);
        };

        document.body.appendChild(script);
      };
      initializeWidget();
    }, 300);
  };

  return (
    <div className="telegram-auth-widget">
      <h3>–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram</h3>
      <p>–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ FamilySpace</p>
      
      <div 
        ref={widgetContainerRef} 
        className="widget-container"
        style={{ minHeight: '50px', position: 'relative' }}
      />
      
      {/* –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ */}
      {isLoading && (
        <div className="widget-loading-state">
          <div className="loading-spinner"></div>
          <span>–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–∂–µ—Ç–∞ Telegram...</span>
        </div>
      )}
      
      {/* –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏ */}
      {error && !isLoading && (
        <div className="widget-error-state">
          <div className="error-message">
            <strong>–û—à–∏–±–∫–∞:</strong> {error}
          </div>
          <button 
            className="reload-button"
            onClick={reloadWidget}
            type="button"
          >
            üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      )}
    </div>
  );
};