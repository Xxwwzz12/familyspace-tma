import React, { useEffect, useRef, useState } from 'react';
import { useAuthStore } from '../stores/auth.store';
import './TelegramAuthWidget.css';

interface TelegramAuthWidgetProps {
  onAuthSuccess?: (userData: any) => void;
  onAuthError?: (error: any) => void;
  buttonSize?: 'large' | 'medium' | 'small';
  showUserPhoto?: boolean;
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è Telegram Widget
declare global {
  interface Window {
    TelegramLoginWidget?: {
      dataOnauth?: (user: any) => void;
    };
  }
}

const TelegramAuthWidget: React.FC<TelegramAuthWidgetProps> = ({
  onAuthSuccess,
  onAuthError,
  buttonSize = 'large',
  showUserPhoto = false
}) => {
  const widgetContainerRef = useRef<HTMLDivElement>(null);
  const [isWidgetLoaded, setIsWidgetLoaded] = useState(false);
  const [widgetError, setWidgetError] = useState<string | null>(null);
  const { loginWithTelegramWidget } = useAuthStore();

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–∂–µ—Ç–∞
  const BOT_USERNAME = 'Family_Space_MVP_bot'; // –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π username –±–æ—Ç–∞
  const WIDGET_SCRIPT_URL = 'https://telegram.org/js/telegram-widget.js?22';

  useEffect(() => {
    loadWidget();
    
    return () => {
      // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
      if (window.TelegramLoginWidget) {
        delete window.TelegramLoginWidget.dataOnauth;
      }
    };
  }, []);

  const loadWidget = () => {
    if (!widgetContainerRef.current) {
      setWidgetError('Widget container not found');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ –≤–∏–¥–∂–µ—Ç —É–∂–µ
    if (isWidgetLoaded) {
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —Å–∫—Ä–∏–ø—Ç —É–∂–µ
    if (document.querySelector(`script[src="${WIDGET_SCRIPT_URL}"]`)) {
      initializeWidget();
      return;
    }

    // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –≤–∏–¥–∂–µ—Ç–∞
    const script = document.createElement('script');
    script.src = WIDGET_SCRIPT_URL;
    script.async = true;
    
    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞
    window.TelegramLoginWidget = {
      dataOnauth: (user: any) => handleTelegramAuth(user)
    };

    script.onload = () => {
      console.log('‚úÖ Telegram Widget script loaded');
      initializeWidget();
    };

    script.onerror = () => {
      console.error('‚ùå Failed to load Telegram Widget script');
      setWidgetError('Failed to load Telegram authentication');
      onAuthError?.('Widget script loading failed');
    };

    document.body.appendChild(script);
  };

  const initializeWidget = () => {
    if (!widgetContainerRef.current) return;

    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
    widgetContainerRef.current.innerHTML = '';

    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞
    const widgetScript = document.createElement('script');
    widgetScript.async = true;
    widgetScript.setAttribute('data-telegram-login', BOT_USERNAME);
    widgetScript.setAttribute('data-size', buttonSize);
    widgetScript.setAttribute('data-onauth', 'TelegramLoginWidget.dataOnauth(user)');
    widgetScript.setAttribute('data-request-access', 'write');
    widgetScript.setAttribute('data-userpic', showUserPhoto ? 'true' : 'false');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π URL –¥–ª—è redirect (–∏–ª–∏ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π)
    const redirectUrl = encodeURIComponent(window.location.href);
    widgetScript.setAttribute('data-auth-url', `${window.location.origin}/api/auth/telegram-widget`);

    widgetContainerRef.current.appendChild(widgetScript);
    setIsWidgetLoaded(true);
    
    console.log('üéØ Telegram Widget initialized');
  };

  const handleTelegramAuth = async (userData: any) => {
    console.log('üîê Telegram Widget auth data received:', userData);
    
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –±—ç–∫–µ–Ω–¥ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
      const result = await loginWithTelegramWidget(userData);
      
      if (result.success) {
        console.log('‚úÖ Telegram Widget authentication successful');
        onAuthSuccess?.(userData);
      } else {
        console.error('‚ùå Telegram Widget authentication failed:', result.error);
        setWidgetError(result.error || 'Authentication failed');
        onAuthError?.(result.error);
      }
    } catch (error: any) {
      console.error('‚ùå Telegram Widget authentication error:', error);
      setWidgetError(error.message || 'Authentication error');
      onAuthError?.(error);
    }
  };

  const reloadWidget = () => {
    setIsWidgetLoaded(false);
    setWidgetError(null);
    loadWidget();
  };

  return (
    <div className="telegram-auth-widget">
      {widgetError ? (
        <div className="widget-error">
          <div className="error-message">
            <strong>–û—à–∏–±–∫–∞:</strong> {widgetError}
          </div>
          <button 
            className="reload-button"
            onClick={reloadWidget}
          >
            üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      ) : (
        <div className="widget-container">
          <div 
            ref={widgetContainerRef}
            className="widget-placeholder"
          >
            {!isWidgetLoaded && (
              <div className="widget-loading">
                <div className="loading-spinner"></div>
                <div>–ó–∞–≥—Ä—É–∑–∫–∞ Telegram Widget...</div>
              </div>
            )}
          </div>
          
          <div className="widget-info">
            <p>–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</p>
          </div>
        </div>
      )}
    </div>
  );
};

export default TelegramAuthWidget;