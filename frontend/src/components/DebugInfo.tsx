import React from 'react';

const DebugInfo: React.FC = () => {
  const debugAuth = (window as any).debugAuth;
  const debugTelegram = (window as any).debugTelegram;

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    alert('–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
  };

  if (!debugAuth && !debugTelegram) {
    return (
      <div style={{ padding: '10px', background: '#ffcccc', border: '1px solid red' }}>
        üîç Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞.
      </div>
    );
  }

  return (
    <div style={{ 
      position: 'fixed', 
      top: 0, 
      left: 0, 
      right: 0, 
      background: '#f0f0f0', 
      border: '2px solid #ccc',
      padding: '10px',
      fontSize: '12px',
      zIndex: 10000,
      maxHeight: '50vh',
      overflow: 'auto'
    }}>
      <h3>üîç –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø</h3>
      
      {debugAuth && (
        <div style={{ marginBottom: '15px', padding: '10px', background: '#e0ffe0', border: '1px solid green' }}>
          <h4>–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è:</h4>
          <div><strong>–°—Ç–∞—Ç—É—Å:</strong> {debugAuth.status}</div>
          <div><strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> {debugAuth.user?.first_name} {debugAuth.user?.last_name}</div>
          <div><strong>ID:</strong> {debugAuth.user?.id}</div>
          
          {debugAuth.hashCheck && (
            <div style={{ marginTop: '10px', padding: '8px', background: '#fff0f0', border: '1px solid #ff9999' }}>
              <h5>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö—ç—à–∞:</h5>
              <div><strong>–û–∂–∏–¥–∞–µ–º—ã–π —Ö—ç—à:</strong> {debugAuth.hashCheck.expectedHash}</div>
              <div><strong>–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ö—ç—à:</strong> {debugAuth.hashCheck.actualHash}</div>
              <div>
                <strong>–°—Ç–∞—Ç—É—Å: </strong>
                <span style={{ 
                  color: debugAuth.hashCheck.isValid ? 'green' : 'red',
                  fontWeight: 'bold'
                }}>
                  {debugAuth.hashCheck.isValid ? '‚úì –í–ê–õ–ò–î–ï–ù' : '‚úó –ù–ï–í–ê–õ–ò–î–ï–ù'}
                </span>
              </div>
              {!debugAuth.hashCheck.isValid && (
                <div style={{ marginTop: '5px', fontSize: '11px', color: '#cc0000' }}>
                  ‚ö†Ô∏è –•—ç—à–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç! –í–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–ø–∏—Å—å—é –¥–∞–Ω–Ω—ã—Ö
                </div>
              )}
            </div>
          )}
          
          <button 
            onClick={() => copyToClipboard(debugAuth.initData)}
            style={{ marginTop: '10px', padding: '5px 10px', cursor: 'pointer' }}
          >
            üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å initData
          </button>
        </div>
      )}
      
      {debugTelegram && (
        <div style={{ padding: '10px', background: '#e0f0ff', border: '1px solid blue' }}>
          <h4>Telegram –¥–∞–Ω–Ω—ã–µ:</h4>
          <div><strong>–í–µ—Ä—Å–∏—è WebApp:</strong> {debugTelegram.version}</div>
          <div><strong>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</strong> {debugTelegram.platform}</div>
          <div><strong>–î–ª–∏–Ω–∞ initData:</strong> {debugTelegram.initData?.length} —Å–∏–º–≤–æ–ª–æ–≤</div>
          
          <h5>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã initData:</h5>
          <div style={{ fontSize: '10px', background: 'white', padding: '5px', overflow: 'auto' }}>
            {debugTelegram.rawParams && Object.entries(debugTelegram.rawParams).map(([key, value]) => (
              <div key={key}><strong>{key}:</strong> {String(value).substring(0, 100)}...</div>
            ))}
          </div>
          
          <div style={{ marginTop: '10px' }}>
            <button 
              onClick={() => copyToClipboard(debugTelegram.initData)}
              style={{ padding: '5px 10px', cursor: 'pointer' }}
            >
              üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å initData Telegram
            </button>
            <button 
              onClick={() => copyToClipboard(JSON.stringify(debugTelegram.initDataUnsafe))}
              style={{ marginLeft: '10px', padding: '5px 10px', cursor: 'pointer' }}
            >
              üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å initDataUnsafe
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default DebugInfo;