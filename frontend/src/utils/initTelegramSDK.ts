import { logger } from './logger';
import { isTelegramEnv } from './env';

console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram SDK...');

// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
const createDevWebApp = () => {
  logger.warn('Running in development mode - using WebApp mock');
  
  return {
    ready: () => {
      console.log('‚úÖ WebApp is ready (development mode)');
      logger.info('WebApp is ready (development mode)');
    },
    initDataUnsafe: {
      user: {
        id: 123456789,
        first_name: 'Test',
        last_name: 'User',
        username: 'testuser',
        language_code: 'en',
        is_premium: true
      }
    },
    expand: () => {
      console.log('üîÑ WebApp expanded');
      logger.info('WebApp expanded');
    },
    close: () => {
      console.log('üîÑ WebApp closed');
      logger.info('WebApp closed');
    },
    // –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  };
};

let webApp: any = null;

// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å WebApp
export const safeWebApp = {
  ready: () => {
    console.log('üîÑ –í—ã–∑–æ–≤ webApp.ready()');
    logger.info('Calling webApp.ready()');
    return webApp?.ready?.();
  },
  initDataUnsafe: webApp?.initDataUnsafe || {},
  expand: () => {
    console.log('üîÑ –í—ã–∑–æ–≤ webApp.expand()');
    logger.info('Calling webApp.expand()');
    return webApp?.expand?.();
  },
  close: () => {
    console.log('üîÑ –í—ã–∑–æ–≤ webApp.close()');
    logger.info('Calling webApp.close()');
    return webApp?.close?.();
  },
  showPopup: (params: any) => {
    console.log('üîÑ –í—ã–∑–æ–≤ webApp.showPopup()', params);
    logger.info('Calling webApp.showPopup()', params);
    return webApp?.showPopup?.(params);
  },
  showAlert: (message: string) => {
    console.log('üîÑ –í—ã–∑–æ–≤ webApp.showAlert()', message);
    logger.info('Calling webApp.showAlert()', message);
    return webApp?.showAlert?.(message);
  },
  showConfirm: (message: string) => {
    console.log('üîÑ –í—ã–∑–æ–≤ webApp.showConfirm()', message);
    logger.info('Calling webApp.showConfirm()', message);
    return webApp?.showConfirm?.(message);
  },
  // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã
};

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
export const initializeWebApp = async () => {
  // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç Telegram, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
  if (isTelegramEnv()) {
    webApp = window.Telegram?.WebApp;
    console.log('‚úÖ Telegram WebApp found in global object');
    logger.info('Telegram WebApp found in global object');
    return;
  }

  try {
    // –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ SDK
    const { init, viewport } = await import('@telegram-apps/sdk');
    init();
    // –ü–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–∞–µ–º webApp –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    webApp = window.Telegram?.WebApp;
    console.log('‚úÖ Telegram SDK initialized successfully');
    logger.info('Telegram SDK initialized successfully');
    
    // –ú–æ–Ω—Ç–∏—Ä—É–µ–º viewport –∏ –æ–±–Ω–æ–≤–ª—è–µ–º layout
    console.log('üîÑ –ú–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ viewport...');
    logger.info('Mounting viewport...');
    
    viewport.mount({ timeout: 5000 })
      .then(() => {
        console.log('‚úÖ Viewport mounted successfully');
        logger.info('Viewport mounted successfully');
        updateLayoutForViewport({
          width: window.innerWidth,
          height: window.innerHeight,
          isExpanded: true,
        });
      })
      .catch((error) => {
        console.warn('‚ö†Ô∏è Viewport mounting timeout or error:', error);
        logger.warn('Viewport mounting timeout or error:', error);
      });
  } catch (error) {
    console.error('‚ùå Failed to initialize Telegram SDK', error);
    logger.error('Failed to initialize Telegram SDK', error);
    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    webApp = createDevWebApp();
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è layout
function updateLayoutForViewport(viewportInfo: { width: number; height: number; isExpanded: boolean }): void {
  const { width, height, isExpanded } = viewportInfo;

  document.documentElement.style.setProperty('--viewport-width', `${width}px`);
  document.documentElement.style.setProperty('--viewport-height', `${height}px`);

  if (isExpanded) {
    document.body.classList.add('viewport-expanded');
    console.log('‚úÖ Viewport expanded');
    logger.info('Viewport expanded');
  } else {
    document.body.classList.remove('viewport-expanded');
    console.log('‚úÖ Viewport collapsed');
    logger.info('Viewport collapsed');
  }
}

export default webApp;