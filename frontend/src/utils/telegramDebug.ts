// frontend/src/utils/telegramDebug.ts

interface DiagnosticResult {
  timestamp: string;
  webAppProperties: Record<string, any>;
  initData: string | null;
  initDataParsed: Record<string, any> | null;
  sdkVersion: string | undefined;
  platform: string | undefined;
  issues: string[];
  recommendations: string[];
}

interface InitDataComparison {
  original: Record<string, any> | null;
  modified: Record<string, any> | null;
  differences: string[];
  isSignatureValid: boolean;
}

/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö Telegram WebApp
 */
export const comprehensiveTelegramDiagnostic = (): DiagnosticResult => {
  const issues: string[] = [];
  const recommendations: string[] = [];
  const timestamp = new Date().toISOString();

  // –ü–æ–ª—É—á–∞–µ–º WebApp –æ–±—ä–µ–∫—Ç
  const webApp = window.Telegram?.WebApp;
  
  if (!webApp) {
    issues.push('Telegram WebApp –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω');
    recommendations.push(
      '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram',
      '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É —Å–∫—Ä–∏–ø—Ç–∞ Telegram WebApp SDK'
    );
    
    return {
      timestamp,
      webAppProperties: {},
      initData: null,
      initDataParsed: null,
      sdkVersion: undefined,
      platform: undefined,
      issues,
      recommendations
    };
  }

  // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ WebApp
  const webAppProperties = logAllTelegramProperties(webApp);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º initData –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  const initData = webApp.initData || '';
  saveInitDataForAnalysis(initData, timestamp);
  
  // –ü–∞—Ä—Å–∏–º initData
  const initDataParsed = parseInitData(initData);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä signature
  const signatureCheck = checkForSignatureParam(initDataParsed);
  if (!signatureCheck.isValid) {
    issues.push(...signatureCheck.issues);
    recommendations.push(...signatureCheck.recommendations);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é SDK
  const versionCheck = checkSDKVersion(webApp.version);
  if (!versionCheck.isValid) {
    issues.push(...versionCheck.issues);
    recommendations.push(...versionCheck.recommendations);
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
  if (!initData) {
    issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç initData');
    recommendations.push(
      '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞',
      '–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WebApp'
    );
  }

  if (!webApp.platform) {
    issues.push('–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞');
    recommendations.push('–û–±–Ω–æ–≤–∏—Ç–µ Telegram –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏');
  }

  console.group('üîç –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Telegram WebApp');
  console.log('üìÖ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:', timestamp);
  console.log('üñ•Ô∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:', webApp.platform);
  console.log('üì¶ –í–µ—Ä—Å–∏—è SDK:', webApp.version);
  console.log('üìä InitData –¥–ª–∏–Ω–∞:', initData.length);
  console.table(webAppProperties);
  
  if (issues.length > 0) {
    console.group('üö® –ü—Ä–æ–±–ª–µ–º—ã');
    issues.forEach(issue => console.log('‚Ä¢', issue));
    console.groupEnd();
    
    console.group('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏');
    recommendations.forEach(rec => console.log('‚Ä¢', rec));
    console.groupEnd();
  } else {
    console.log('‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
  }
  console.groupEnd();

  return {
    timestamp,
    webAppProperties,
    initData,
    initDataParsed,
    sdkVersion: webApp.version,
    platform: webApp.platform,
    issues,
    recommendations
  };
};

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç –í–°–ï —Å–≤–æ–π—Å—Ç–≤–∞ window.Telegram.WebApp
 */
export const logAllTelegramProperties = (webApp: any): Record<string, any> => {
  const properties: Record<string, any> = {};
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞, –≤–∫–ª—é—á–∞—è —É–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–Ω—ã–µ
    const allProperties = getAllObjectProperties(webApp);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –ª–æ–≥–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ (–∏—Å–∫–ª—é—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –±–æ–ª—å—à–∏–µ –æ–±—ä–µ–∫—Ç—ã)
    for (const key of allProperties) {
      try {
        const value = webApp[key];
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        if (typeof value === 'function') {
          properties[key] = 'function';
        } else if (value instanceof Date) {
          properties[key] = value.toISOString();
        } else if (typeof value === 'object' && value !== null) {
          // –î–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –ª–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–∏–ø –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π
          if (Array.isArray(value)) {
            properties[key] = `array[${value.length}]`;
          } else {
            const keys = Object.keys(value);
            properties[key] = `object{${keys.length} keys}`;
          }
        } else {
          properties[key] = value;
        }
      } catch (error) {
        properties[key] = 'unaccessible';
      }
    }
    
    console.group('üìã –í—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ Telegram WebApp');
    console.table(properties);
    console.groupEnd();
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–≤–æ–π—Å—Ç–≤ WebApp:', error);
  }
  
  return properties;
};

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç initData –≤ localStorage –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
 */
export const saveInitDataForAnalysis = (initData: string, timestamp: string): void => {
  if (!initData) return;
  
  try {
    const storageKey = 'telegram_initdata_debug';
    const existingData = localStorage.getItem(storageKey);
    const debugEntries = existingData ? JSON.parse(existingData) : [];
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
    const newEntry = {
      timestamp,
      initData,
      parsed: parseInitData(initData),
      userAgent: navigator.userAgent,
      url: window.location.href
    };
    
    debugEntries.unshift(newEntry);
    const trimmedEntries = debugEntries.slice(0, 10);
    
    localStorage.setItem(storageKey, JSON.stringify(trimmedEntries));
    console.log('üíæ InitData —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:', newEntry);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ initData:', error);
  }
};

/**
 * –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ signature
 */
export const checkForSignatureParam = (initDataParsed: Record<string, any> | null) => {
  const issues: string[] = [];
  const recommendations: string[] = [];
  let isValid = true;
  
  if (!initDataParsed) {
    issues.push('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ signature');
    isValid = false;
    return { isValid, issues, recommendations };
  }
  
  const { signature, ...otherParams } = initDataParsed;
  
  if (!signature) {
    issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä signature –≤ initData');
    recommendations.push(
      '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞',
      '–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ Telegram'
    );
    isValid = false;
  } else if (typeof signature !== 'string' || signature.length < 10) {
    issues.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏–Ω–∞ signature');
    isValid = false;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥—Ä—É–≥–∏—Ö –≤–∞–∂–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const requiredParams = ['hash', 'auth_date'];
  for (const param of requiredParams) {
    if (!(param in otherParams)) {
      issues.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: ${param}`);
      isValid = false;
    }
  }
  
  return { isValid, issues, recommendations };
};

/**
 * –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 */
export const compareDataBeforeAfter = (
  originalData: string, 
  modifiedData: string
): InitDataComparison => {
  const differences: string[] = [];
  
  const originalParsed = parseInitData(originalData);
  const modifiedParsed = parseInitData(modifiedData);
  
  // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  if (originalParsed && modifiedParsed) {
    const allKeys = new Set([
      ...Object.keys(originalParsed),
      ...Object.keys(modifiedParsed)
    ]);
    
    for (const key of allKeys) {
      const originalVal = originalParsed[key];
      const modifiedVal = modifiedParsed[key];
      
      if (originalVal !== modifiedVal) {
        if (key === 'signature') {
          differences.push('signature –∏–∑–º–µ–Ω–µ–Ω (–æ–∂–∏–¥–∞–µ–º–æ –ø—Ä–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö)');
        } else {
          differences.push(`${key}: "${originalVal}" ‚Üí "${modifiedVal}"`);
        }
      }
    }
  } else if (!originalParsed && modifiedParsed) {
    differences.push('–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω—ã');
  } else if (originalParsed && !modifiedParsed) {
    differences.push('–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω—ã');
  } else {
    differences.push('–û–±–∞ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω—ã');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å signature (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
  const isSignatureValid = Boolean(
    modifiedParsed?.signature && 
    typeof modifiedParsed.signature === 'string' &&
    modifiedParsed.signature.length > 10
  );
  
  return {
    original: originalParsed,
    modified: modifiedParsed,
    differences,
    isSignatureValid
  };
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏—é Telegram WebApp SDK
 */
export const checkSDKVersion = (version: string | undefined) => {
  const issues: string[] = [];
  const recommendations: string[] = [];
  let isValid = true;
  
  if (!version) {
    issues.push('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é SDK');
    isValid = false;
    return { isValid, issues, recommendations };
  }
  
  const versionNum = parseFloat(version);
  
  if (isNaN(versionNum)) {
    issues.push(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è SDK: ${version}`);
    isValid = false;
  } else if (versionNum < 6.0) {
    issues.push(`–£—Å—Ç–∞—Ä–µ–≤—à–∞—è –≤–µ—Ä—Å–∏—è SDK: ${version}`);
    recommendations.push('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å Telegram –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏');
    isValid = false;
  }
  
  return { isValid, issues, recommendations };
};

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞ (–≤–∫–ª—é—á–∞—è —É–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–Ω—ã–µ)
 */
const getAllObjectProperties = (obj: any): string[] => {
  const properties = new Set<string>();
  
  let current = obj;
  while (current && current !== Object.prototype) {
    Object.getOwnPropertyNames(current).forEach(prop => {
      properties.add(prop);
    });
    current = Object.getPrototypeOf(current);
  }
  
  return Array.from(properties);
};

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø–∞—Ä—Å–∏—Ç initData —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç
 */
const parseInitData = (initData: string): Record<string, any> | null => {
  if (!initData) return null;
  
  try {
    const params = new URLSearchParams(initData);
    const result: Record<string, any> = {};
    
    for (const [key, value] of params.entries()) {
      result[key] = value;
    }
    
    return result;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ initData:', error);
    return null;
  }
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö initData –∏–∑ localStorage
 */
export const getInitDataHistory = (): any[] => {
  try {
    const storageKey = 'telegram_initdata_debug';
    const data = localStorage.getItem(storageKey);
    return data ? JSON.parse(data) : [];
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ initData:', error);
    return [];
  }
};

/**
 * –û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö initData
 */
export const clearInitDataHistory = (): void => {
  try {
    localStorage.removeItem('telegram_initdata_debug');
    console.log('üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è initData –æ—á–∏—â–µ–Ω–∞');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ initData:', error);
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export default {
  comprehensiveTelegramDiagnostic,
  logAllTelegramProperties,
  saveInitDataForAnalysis,
  checkForSignatureParam,
  compareDataBeforeAfter,
  checkSDKVersion,
  getInitDataHistory,
  clearInitDataHistory
};