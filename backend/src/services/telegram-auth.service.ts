// backend/src/services/telegram-auth.service.ts
import { AuthDataValidator } from '@telegram-auth/server';
import { urlStrToAuthDataMap } from '@telegram-auth/server/utils';
import { TelegramUser } from '../types/telegram';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ –∂–µ–ª–∞–Ω–∏—é)
interface ValidationOptions {
  debug?: boolean;
}

// –§–æ–ª–±—ç–∫-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
const FALLBACK_USER: TelegramUser = {
  id: 123456789,
  first_name: 'Test',
  last_name: 'User',
  username: 'testuser',
  language_code: 'en',
  is_premium: true,
  allows_write_to_pm: true
};

export async function validateInitData(initData: string, options: ValidationOptions = {}): Promise<TelegramUser> {
  const { debug = false } = options;

  if (debug) {
    console.log('=== TELEGRAM AUTH DEBUG START ===');
    console.log('[TelegramAuth] raw initData:', initData);
  }

  // --- 1. –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (Fallback) ---
  if (initData.includes('hash=development_fallback_hash')) {
    if (debug) {
      console.log('[TelegramAuth] Development fallback mode detected');
    }
    const qs = new URLSearchParams(initData);
    const userParam = qs.get('user');
    if (userParam) {
      try {
        const user = JSON.parse(decodeURIComponent(userParam)) as TelegramUser;
        if (debug) console.log('[TelegramAuth] Fallback user data used:', user);
        return user;
      } catch (err) {
        if (debug) console.warn('Failed to parse fallback user data, using default', err);
      }
    }
    return FALLBACK_USER;
  }

  // --- 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è BOT_TOKEN ---
  const BOT_TOKEN = process.env.BOT_TOKEN;
  if (!BOT_TOKEN) {
    throw new Error('BOT_TOKEN is not set in environment variables');
  }

  // --- 3. –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ @telegram-auth/server ---
  try {
    if (debug) {
      console.log('üîê Validating initData via @telegram-auth/server...');
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä —Å —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞
    const validator = new AuthDataValidator({ botToken: BOT_TOKEN });
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ URL –≤ Map
    const data = urlStrToAuthDataMap(initData);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
    const user = await validator.validate(data);

    if (debug) {
      console.log('‚úÖ Validation result from library:', user);
      console.log('‚úÖ AUTHENTICATION SUCCESSFUL');
    }

    return user;

  } catch (error) {
    if (debug) {
      console.error('‚ùå Authentication failed:', error);
    }
    throw new Error(`Authentication failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}