// src/services/telegram-auth.service.ts
import * as crypto from 'crypto';
import { TelegramUser } from '../types/telegram';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
interface ValidationOptions {
  disableTimeCheck?: boolean;
  debug?: boolean;
}

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è fallback-—Ä–µ–∂–∏–º–∞
const FALLBACK_USER: TelegramUser = {
  id: 123456789,
  first_name: 'Test',
  last_name: 'User', 
  username: 'testuser',
  language_code: 'en',
  is_premium: true,
  allows_write_to_pm: true
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
function validateEnvironmentVariables(debug: boolean = false): string {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ BOT_TOKEN
  if (!process.env.BOT_TOKEN) {
    console.error('‚ùå BOT_TOKEN is not set in environment variables');
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–±–µ–∑ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
    const envKeys = Object.keys(process.env).sort();
    console.log('üìã Available environment variables:', envKeys.join(', '));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ö–æ–∂–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    const similarVars = envKeys.filter(key => 
      key.includes('BOT') || key.includes('TOKEN') || key.includes('TELEGRAM')
    );
    
    if (similarVars.length > 0) {
      console.log('üîç Similar environment variables found:', similarVars.join(', '));
    }
    
    throw new Error('BOT_TOKEN is not set in environment variables');
  }
  
  const BOT_TOKEN = process.env.BOT_TOKEN.trim();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ trim()
  if (!BOT_TOKEN) {
    console.error('‚ùå BOT_TOKEN is set but empty or contains only whitespace');
    throw new Error('BOT_TOKEN is empty or contains only whitespace');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—á–∏—Å–ª–æ:—Å–µ–∫—Ä–µ—Ç")
  if (!BOT_TOKEN.match(/^\d+:[a-zA-Z0-9_-]+$/)) {
    console.error('‚ùå Invalid BOT_TOKEN format');
    
    // –ú–∞—Å–∫–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤)
    const maskedToken = BOT_TOKEN.length > 10 
      ? BOT_TOKEN.substring(0, 10) + '...' 
      : BOT_TOKEN;
    
    console.log('üîí BOT_TOKEN (masked):', maskedToken);
    console.log('üìù Expected format: "number:secret" (e.g., "1234567890:ABCdefGHIjklMNOpqrsTUVwxyz")');
    
    throw new Error('Invalid BOT_TOKEN format. Expected format: "number:secret"');
  }
  
  if (debug) {
    // –í debug —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Ç–æ–∫–µ–Ω–∞
    const maskedToken = BOT_TOKEN.substring(0, 5) + '...' + BOT_TOKEN.substring(BOT_TOKEN.length - 5);
    console.log('‚úÖ BOT_TOKEN is available and valid (masked):', maskedToken);
    console.log('‚úÖ BOT_TOKEN length:', BOT_TOKEN.length);
  } else {
    console.log('‚úÖ BOT_TOKEN is available and valid');
  }
  
  return BOT_TOKEN;
}

export async function validateInitData(
  initData: string, 
  options: ValidationOptions = {}
): Promise<TelegramUser> {
  const { disableTimeCheck = false, debug = false } = options;
  
  if (debug) {
    console.log('[TelegramAuth] InitData received:', initData);
    console.log('[TelegramAuth] Validation options:', { disableTimeCheck, debug });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ fallback-—Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  if (initData.includes('hash=development_fallback_hash')) {
    if (debug) {
      console.log('[TelegramAuth] Development fallback mode detected');
    }
    
    // –ü–∞—Ä—Å–∏–º initData —á—Ç–æ–±—ã –∏–∑–≤–ª–µ—á—å user, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    const params = new URLSearchParams(initData);
    const userParam = params.get('user');
    
    if (userParam) {
      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userData = JSON.parse(decodeURIComponent(userParam));
        
        if (debug) {
          console.log('[TelegramAuth] Using provided user data from fallback:', userData);
        }
        
        return userData;
      } catch (error) {
        if (debug) {
          console.warn('[TelegramAuth] Failed to parse user data in fallback mode, using default');
        }
      }
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (debug) {
      console.log('[TelegramAuth] Returning fallback user:', FALLBACK_USER);
    }
    
    return FALLBACK_USER;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
  const BOT_TOKEN = validateEnvironmentVariables(debug);

  // –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ù–ï –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è!
  const searchParams = new URLSearchParams(initData);

  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö—ç—à –∏ —Å—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
  const hash = searchParams.get('hash');
  if (!hash) {
    throw new Error('Missing hash parameter in initData');
  }
  searchParams.delete('hash');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å auth_date
  const authDateStr = searchParams.get('auth_date');
  if (!authDateStr) {
    throw new Error('Missing auth_date parameter in initData');
  }
  
  const authDate = parseInt(authDateStr, 10);
  if (isNaN(authDate)) {
    throw new Error('Invalid auth_date format. Expected UNIX timestamp');
  }

  if (!disableTimeCheck) {
    const currentTime = Math.floor(Date.now() / 1000);
    const timeDiff = currentTime - authDate;
    const timeDiffMinutes = Math.floor(timeDiff / 60);
    
    if (debug) {
      console.log('[TelegramAuth] Auth date:', new Date(authDate * 1000).toISOString());
      console.log('[TelegramAuth] Current time:', new Date(currentTime * 1000).toISOString());
      console.log('[TelegramAuth] Time difference:', timeDiffMinutes, 'minutes');
    }
    
    if (timeDiff > 30 * 60) {
      throw new Error(`Auth date is too old (${timeDiffMinutes} minutes). Maximum allowed: 30 minutes`);
    }
  } else if (debug) {
    console.log('[TelegramAuth] Time validation disabled');
  }

  // 1. –§–æ—Ä–º–∏—Ä—É–µ–º data-check-string –∏–∑ –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–• –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –∫–ª—é—á—É –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
  const entries = Array.from(searchParams.entries());
  entries.sort(([a], [b]) => a.localeCompare(b));
  
  // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "key=<value>", –≥–¥–µ value –Ω–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ.
  const dataCheckString = entries.map(([key, value]) => `${key}=${value}`).join('\n');

  if (debug) {
    console.log('[TelegramAuth] Data check string:', dataCheckString);
    console.log('[TelegramAuth] Entries:', entries);
  }

  // 2. –ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã—á–∏—Å–ª—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á.
  // –ö–ª—é—á = SHA256("WebAppData" + BOT_TOKEN)
  const secretKey = crypto
    .createHash('sha256')
    .update('WebAppData' + BOT_TOKEN)
    .digest();

  // 3. –í—ã—á–∏—Å–ª—è–µ–º —Ö—ç—à –æ—Ç dataCheckString —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞.
  const calculatedHash = crypto
    .createHmac('sha256', secretKey)
    .update(dataCheckString)
    .digest('hex');

  if (debug) {
    console.log('[TelegramAuth] Expected hash:', calculatedHash);
    console.log('[TelegramAuth] Received hash:', hash);
    console.log('[TelegramAuth] Secret key source:', 'WebAppData' + BOT_TOKEN);
  }

  // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ö—ç—à–∏
  if (calculatedHash !== hash) {
    throw new Error(`Invalid hash. Expected: ${calculatedHash}, Received: ${hash}. Check BOT_TOKEN and parameter encoding.`);
  }

  if (debug) {
    console.log('[TelegramAuth] Hash validation successful');
  }

  // –ü–∞—Ä—Å–∏–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  try {
    const userJson = searchParams.get('user');
    if (!userJson) {
      throw new Error('Missing user data in initData');
    }
    const user = JSON.parse(userJson) as TelegramUser;
    
    if (debug) {
      console.log('[TelegramAuth] User data:', user);
    }
    
    return user;
  } catch (error) {
    throw new Error(`Invalid user data: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export { validateEnvironmentVariables };