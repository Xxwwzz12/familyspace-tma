// backend/src/services/telegram-auth.service.ts
import * as crypto from 'crypto';
import { TelegramUser } from '../types/telegram';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
interface ValidationOptions {
  disableTimeCheck?: boolean;
  debug?: boolean;
}

// –§–æ–ª–±—ç–∫-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è dev
const FALLBACK_USER: TelegramUser = {
  id: 123456789,
  first_name: 'Test',
  last_name: 'User',
  username: 'testuser',
  language_code: 'en',
  is_premium: true,
  allows_write_to_pm: true
};

// –í–†–ï–ú–ï–ù–ù–û: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–∫—É —Ö—ç—à–∞
const DEBUG_SKIP_HASH_CHECK = process.env.DEBUG_SKIP_HASH_CHECK === 'true' || true; // –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ true

// üîß –í–†–ï–ú–ï–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø - –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
const DEBUG_SKIP_TIME_CHECK = true; // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏ —Ö—ç—à–∞
const isHashCheckDisabled = (): boolean => {
  return DEBUG_SKIP_HASH_CHECK;
};

function validateEnvironmentVariables(debug = false): string {
  if (!process.env.BOT_TOKEN) {
    if (debug) console.error('‚ùå BOT_TOKEN not set');
    const envKeys = Object.keys(process.env).sort();
    if (debug) console.log('üìã Available env:', envKeys.join(', '));
    throw new Error('BOT_TOKEN is not set in environment variables');
  }
  const BOT_TOKEN = process.env.BOT_TOKEN.trim();
  if (!BOT_TOKEN) throw new Error('BOT_TOKEN is empty or whitespace');
  if (!BOT_TOKEN.match(/^\d+:[a-zA-Z0-9_-]+$/)) {
    if (debug) console.error('‚ùå BOT_TOKEN has unexpected format');
    throw new Error('Invalid BOT_TOKEN format. Expected "number:secret"');
  }
  if (debug) {
    const masked = BOT_TOKEN.substring(0, 5) + '...' + BOT_TOKEN.substring(BOT_TOKEN.length - 5);
    console.log('‚úÖ BOT_TOKEN (masked):', masked, 'len=', BOT_TOKEN.length);
  }
  
  // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏
  if (isHashCheckDisabled()) {
    console.warn('‚ö†Ô∏è  DEBUG_SKIP_HASH_CHECK is enabled - HASH VERIFICATION IS DISABLED');
    console.warn('‚ö†Ô∏è  This should only be used for temporary debugging purposes');
  }
  
  // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
  if (DEBUG_SKIP_TIME_CHECK) {
    console.warn('‚ö†Ô∏è  DEBUG_SKIP_TIME_CHECK is enabled - TIME VERIFICATION IS DISABLED');
    console.warn('‚ö†Ô∏è  This should only be used for temporary debugging purposes');
  }
  
  return BOT_TOKEN;
}

// üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å —É—á–µ—Ç–æ–º signature
function extractAndPrepareParams(initData: string, debug = false) {
  const params: Record<string, string> = {};
  const rawParams: Record<string, string> = {};
  const cleaned = initData.startsWith('?') ? initData.slice(1) : initData;
  const pairs = cleaned.split('&').filter(Boolean);

  for (const pair of pairs) {
    const idx = pair.indexOf('=');
    const key = idx >= 0 ? pair.slice(0, idx) : pair;
    const value = idx >= 0 ? pair.slice(idx + 1) : '';
    rawParams[key] = value; // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª (URL-encoded)
  }

  const hash = rawParams['hash'] ?? (new URLSearchParams(cleaned).get('hash') ?? '');
  if (!hash) throw new Error('Missing hash in initData');

  // üîß –ò–°–ö–õ–Æ–ß–ê–ï–ú signature –∏–∑ –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const allowedKeys = ['auth_date', 'query_id', 'user'];
  for (const k of Object.keys(rawParams)) {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º hash –∏ signature
    if (k === 'hash' || k === 'signature') continue;
    
    if (allowedKeys.includes(k)) {
      try {
        params[k] = decodeURIComponent(rawParams[k]);
      } catch {
        params[k] = rawParams[k];
      }
    }
  }

  if (debug || isHashCheckDisabled()) {
    console.log('[TelegramAuth] Decoded params for logic:', params);
    console.log('[TelegramAuth] Raw params (URL-encoded):', rawParams);
    console.log('[TelegramAuth] Received hash:', hash);
    if (rawParams['signature']) {
      console.log('‚ö†Ô∏è  Found signature parameter (excluded from data-check-string):', rawParams['signature']);
    }
  }

  return { params, rawParams, hash };
}

// üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ data-check-string –±–µ–∑ hash –∏ signature
function buildDataCheckString(rawParams: Record<string, string>, debug = false): string {
  // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ —É–¥–∞–ª—è–µ–º hash –∏ signature
  const checkParams = new URLSearchParams();
  
  for (const [key, value] of Object.entries(rawParams)) {
    // üî¥ –í–ê–ñ–ù–û: –∏—Å–∫–ª—é—á–∞–µ–º hash –∏ signature –∏–∑ data-check-string
    if (key === 'hash' || key === 'signature') continue;
    
    // –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const allowedKeys = ['auth_date', 'query_id', 'user'];
    if (allowedKeys.includes(key)) {
      checkParams.append(key, value);
    }
  }

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –∫–ª—é—á—É –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
  const sortedEntries = Array.from(checkParams.entries())
    .sort(([a], [b]) => a.localeCompare(b));
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º data-check-string
  const dataCheckString = sortedEntries
    .map(([key, value]) => `${key}=${value}`)
    .join('\n');

  if (debug || isHashCheckDisabled()) {
    console.log('üìã Data-check-string (–±–µ–∑ hash –∏ signature):');
    console.log('```');
    console.log(dataCheckString);
    console.log('```');
    console.log('üìè –î–ª–∏–Ω–∞ data-check-string:', dataCheckString.length);
    console.log('üî§ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ data-check-string:');
    sortedEntries.forEach(([key, value]) => {
      console.log(`  ${key}=${value}`);
    });
  }

  return dataCheckString;
}

// üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
function buildSecretKey(botToken: string, debug = false): Buffer {
  // üî¥ –ë–´–õ–û (–ù–ï–ü–†–ê–í–ò–õ–¨–ù–û):
  // const secretKey = crypto.createHmac('sha256', 'WebAppData').update(BOT_TOKEN).digest();
  
  // üü¢ –°–¢–ê–õ–û (–ü–†–ê–í–ò–õ–¨–ù–û):
  // –ü–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Telegram: secret = HMAC_SHA256("WebAppData", botToken)
  // –í Node.js: crypto.createHmac(algorithm, key).update(data)
  // –ü–æ—ç—Ç–æ–º—É: key = botToken, data = "WebAppData"
  const secretKey = crypto
    .createHmac('sha256', botToken)
    .update('WebAppData')
    .digest();

  if (debug || isHashCheckDisabled()) {
    console.log('üîê Secret key computation: HMAC_SHA256(botToken, "WebAppData")');
    console.log('üîê Secret key (hex):', secretKey.toString('hex'));
    console.log('üîê Secret key length:', secretKey.length);
  }

  return secretKey;
}

// üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –í–ê–õ–ò–î–ê–¶–ò–ò
export async function validateInitData(initData: string, options: ValidationOptions = {}): Promise<TelegramUser> {
  const { disableTimeCheck = false, debug = false } = options;
  const hashCheckDisabled = isHashCheckDisabled();
  
  if (debug || hashCheckDisabled) {
    console.log('=== TELEGRAM AUTH DEBUG START ===');
    console.log('[TelegramAuth] raw initData:', initData);
    console.log('[TelegramAuth] options:', { disableTimeCheck, debug });
    if (hashCheckDisabled) {
      console.warn('üö® HASH VERIFICATION DISABLED - DEBUG_SKIP_HASH_CHECK=true');
    }
    if (DEBUG_SKIP_TIME_CHECK) {
      console.warn('üö® TIME VERIFICATION DISABLED - DEBUG_SKIP_TIME_CHECK=true');
    }
  }

  // dev fallback
  if (initData.includes('hash=development_fallback_hash')) {
    if (debug || hashCheckDisabled) console.log('[TelegramAuth] development fallback');
    const qs = new URLSearchParams(initData);
    const userParam = qs.get('user');
    if (userParam) {
      try {
        const u = JSON.parse(decodeURIComponent(userParam));
        if (debug || hashCheckDisabled) console.log('[TelegramAuth] fallback user:', u);
        return u;
      } catch (err) {
        if (debug || hashCheckDisabled) console.warn('failed parse fallback user', err);
      }
    }
    return FALLBACK_USER;
  }

  const BOT_TOKEN = validateEnvironmentVariables(debug || hashCheckDisabled);
  const { params, rawParams, hash } = extractAndPrepareParams(initData, debug || hashCheckDisabled);

  if (!params.auth_date) throw new Error('Missing auth_date');
  const authDate = parseInt(params.auth_date, 10);
  if (isNaN(authDate)) throw new Error('Invalid auth_date');

  // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–†–ï–ú–ï–ù–ò –° –í–û–ó–ú–û–ñ–ù–û–°–¢–¨–Æ –û–¢–ö–õ–Æ–ß–ï–ù–ò–Ø
  const MAX_AUTH_AGE = 30 * 60; // 30 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  
  if (!DEBUG_SKIP_TIME_CHECK && !disableTimeCheck) {
    const now = Math.floor(Date.now() / 1000);
    const diff = now - authDate;
    const timeDiffMinutes = Math.floor(diff / 60);
    
    if (debug || hashCheckDisabled) {
      console.log('[TelegramAuth] auth_date:', new Date(authDate * 1000).toISOString());
      console.log('[TelegramAuth] current time:', new Date(now * 1000).toISOString());
      console.log('[TelegramAuth] time difference:', timeDiffMinutes, 'minutes');
      console.log('[TelegramAuth] maximum allowed age:', 30, 'minutes');
    }
    
    // üîß –í–†–ï–ú–ï–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
    if (!DEBUG_SKIP_TIME_CHECK && diff > MAX_AUTH_AGE) {
      throw new Error(`Auth date too old (${timeDiffMinutes} minutes). Maximum allowed: 30 minutes`);
    }
  } else {
    const now = Math.floor(Date.now() / 1000);
    const diff = now - authDate;
    const timeDiffMinutes = Math.floor(diff / 60);
    
    if (debug || hashCheckDisabled) {
      console.log('[TelegramAuth] auth_date:', new Date(authDate * 1000).toISOString());
      console.log('[TelegramAuth] current time:', new Date(now * 1000).toISOString());
      console.log('[TelegramAuth] time difference:', timeDiffMinutes, 'minutes');
      console.log('[TelegramAuth] ‚ö†Ô∏è  TIME CHECK DISABLED');
    }
  }

  // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú –ü–†–û–í–ï–†–ö–ò –•–≠–®–ê
  if (hashCheckDisabled) {
    console.warn('‚ö†Ô∏è  SKIPPING HASH VERIFICATION - DEBUG_SKIP_HASH_CHECK=true');
    console.warn('‚ö†Ô∏è  This should only be used for temporary debugging');
    
    // –í—Å–µ —Ä–∞–≤–Ω–æ –≤—ã—á–∏—Å–ª—è–µ–º –∏ –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    const dataCheckString = buildDataCheckString(rawParams, true);
    const secretKey = buildSecretKey(BOT_TOKEN, true);
    const expectedHash = crypto
      .createHmac('sha256', secretKey)
      .update(dataCheckString)
      .digest('hex');
    
    console.log('üîê Expected hash:', expectedHash);
    console.log('üîê Received hash:', hash);
    console.log('‚úÖ Hashes match (would be):', expectedHash === hash);
    
  } else {
    // üîß –ù–û–†–ú–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –•–≠–®–ê –° –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ú –ê–õ–ì–û–†–ò–¢–ú–û–ú
    console.log('üîê Starting hash validation...');
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º data-check-string (–±–µ–∑ hash –∏ signature)
    const dataCheckString = buildDataCheckString(rawParams, debug);
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
    const secretKey = buildSecretKey(BOT_TOKEN, debug);
    
    // –í—ã—á–∏—Å–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Ö—ç—à
    const expectedHash = crypto
      .createHmac('sha256', secretKey)
      .update(dataCheckString)
      .digest('hex');
    
    console.log('üîê Expected hash:', expectedHash);
    console.log('üîê Received hash:', hash);
    console.log('‚úÖ Hashes match:', expectedHash === hash);
    
    if (expectedHash !== hash) {
      console.error('‚ùå Hash validation failed!');
      console.log('üîç Troubleshooting suggestions:');
      console.log('   1. Check that BOT_TOKEN is correct');
      console.log('   2. Verify initData is passed exactly as received from Telegram');
      console.log('   3. Ensure hash and signature are excluded from data-check-string');
      console.log('   4. Check parameter sorting (alphabetical order)');
      console.log('   5. Verify secret key computation: HMAC_SHA256(botToken, "WebAppData")');
      throw new Error(`Invalid hash. Expected: ${expectedHash}, Received: ${hash}`);
    }
    
    console.log('üîê Hash validation successful ‚úÖ');
  }

  // –ü–∞—Ä—Å–∏–º user JSON (–∏–∑ decoded params) - —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
  try {
    const userJson = params.user;
    if (!userJson) throw new Error('Missing user JSON');
    if (debug || hashCheckDisabled) console.log('[TelegramAuth] userJson to parse:', userJson);
    const user = JSON.parse(userJson) as TelegramUser;
    if (debug || hashCheckDisabled) {
      console.log('[TelegramAuth] parsed user:', user);
      if (hashCheckDisabled) {
        console.warn('‚úÖ AUTHENTICATION SUCCESSFUL (HASH CHECK SKIPPED)');
      } else {
        console.log('‚úÖ AUTHENTICATION SUCCESSFUL');
      }
    }
    return user;
  } catch (err) {
    throw new Error(`Invalid user JSON: ${err instanceof Error ? err.message : String(err)}`);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤
export { validateEnvironmentVariables, extractAndPrepareParams, buildDataCheckString, isHashCheckDisabled };