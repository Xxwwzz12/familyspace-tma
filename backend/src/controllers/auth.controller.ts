// src/controllers/auth.controller.ts
import { Request, Response } from 'express';
import { validateInitData } from '../services/telegram-auth.service';
import { findOrCreateUser } from '../services/user.service';
import { generateToken } from '../services/jwt.service';

// –û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
export const authInit = async (req: Request, res: Response): Promise<void> => {
  try {
    const { initData } = req.body;
    
    console.log('üîê Auth init started with initData length:', initData?.length);
    console.log('üìã First 100 chars of initData:', initData?.substring(0, 100));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ initData
    if (!initData) {
      console.log('‚ùå Missing initData in request');
      res.status(400).json({ error: 'initData is required' });
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç initData
    if (!initData.includes('hash=') || !initData.includes('auth_date=')) {
      console.log('‚ùå Invalid initData format - missing required fields');
      res.status(400).json({ error: 'Invalid initData format' });
      return;
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram
    console.log('üîÑ Validating initData...');
    const telegramUser = await validateInitData(initData, { debug: true });
    console.log('‚úÖ InitData validation successful');
    
    // –°–æ–∑–¥–∞–Ω–∏–µ/–ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üîÑ Finding or creating user...');
    const user = await findOrCreateUser(telegramUser);
    console.log('‚úÖ User processing successful, user ID:', user.id);
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
    console.log('üîÑ Generating JWT token...');
    const token = generateToken(user.id);
    console.log('‚úÖ Token generation successful');
    
    console.log('‚úÖ Auth init successful for user:', user.id);
    
    res.json({
      token,
      user: {
        id: user.id.toString(),
        firstName: user.firstName,
        lastName: user.lastName,
        username: user.username,
        telegramId: user.telegramId.toString(),
      },
    });
    
  } catch (error) {
    console.error('‚ùå Auth init error:', error);
    
    // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
    if (error instanceof Error) {
      console.error('‚ùå Error details:', {
        name: error.name,
        message: error.message,
        stack: error.stack,
        timestamp: new Date().toISOString(),
        initDataLength: req.body.initData?.length || 0,
        initDataPrefix: req.body.initData?.substring(0, 50) || 'None'
      });
    }
    
    let errorMessage = 'Authentication failed';
    let statusCode = 500;
    
    if (error instanceof Error) {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
      if (error.message.includes('validation') || 
          error.message.includes('Invalid') || 
          error.message.includes('signature')) {
        statusCode = 401;
        errorMessage = 'Invalid initData signature';
      } else if (error.message.includes('required') || 
                 error.message.includes('missing') ||
                 error.message.includes('format')) {
        statusCode = 400;
        errorMessage = error.message;
      }
    }
    
    res.status(statusCode).json({ 
      error: errorMessage,
      details: process.env.NODE_ENV === 'development' && error instanceof Error 
        ? error.message 
        : undefined
    });
  }
};

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export const testAuth = async (req: Request, res: Response): Promise<void> => {
  try {
    console.log('üß™ Test auth endpoint called');
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π telegramId –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const randomTelegramId = Math.floor(Math.random() * 1000000000);
    
    const telegramUser = {
      id: randomTelegramId,
      first_name: 'Test',
      last_name: 'User' + randomTelegramId.toString().slice(0, 3),
      username: 'testuser' + randomTelegramId.toString().slice(0, 3),
      photo_url: null,
      is_bot: false,
      language_code: 'ru',
      allows_write_to_pm: true
    };

    console.log('üîÑ Creating test user...');
    const user = await findOrCreateUser(telegramUser);
    const token = generateToken(user.id);
    
    console.log('‚úÖ Test auth successful for user:', user.id);

    res.json({
      token,
      user: {
        id: user.id.toString(),
        firstName: user.firstName,
        lastName: user.lastName,
        username: user.username,
        telegramId: user.telegramId.toString(),
      }
    });
  } catch (error) {
    console.error('‚ùå Test auth error:', error);
    
    if (error instanceof Error) {
      console.error('‚ùå Test auth error details:', {
        name: error.name,
        message: error.message,
        stack: error.stack,
        timestamp: new Date().toISOString()
      });
    }
    
    res.status(500).json({ 
      error: 'Test authentication failed',
      details: process.env.NODE_ENV === 'development' && error instanceof Error 
        ? error.message 
        : undefined
    });
  }
};

// –í—Ä–µ–º–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ö—ç—à–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
export const testHashValidation = async (req: Request, res: Response): Promise<void> => {
  try {
    // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–∞—à–∏—Ö –ª–æ–≥–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ)
    const testInitData = 'query_id=AAF8fB4SAAAAAHx8HhLC8JIT&user=%7B%22id%22%3A303987836%2C%22first_name%22%3A%22%D0%95%D0%B3%D0%BE%D1%80%22%2C%22last_name%22%3A%22%D0%93%D1%83%D1%80%D0%B5%D0%B2%D0%B8%D1%87%22%2C%22username%22%3A%22gurevichegor%22%2C%22language_code%22%3A%22ru%22%2C%22allows_write_to_pm%22%3Atrue%2C%22photo_url%22%3A%22https%3A%5C%2F%5C%2Ft.me%5C%2Fi%5C%2Fuserpic%5C%2F320%5C%2F9kb8SZ1ANHlzQmQyHP6pZPKvlwG0fE3jw1ICgS0c4Sg.svg%22%7D&auth_date=1759211779&signature=A8a7ZIkwQFGSG8Z96rTqfzmgVcq2o9GkL7I6WSLxE19hqXwvVhN59Mg9dfom6SBPkvnDlhCi1_rHIGp73pxCCA&hash=8bc3031175fe510023776ac58e5a4e20b02b726fd70d6c72d5a84cd74458829b';
    
    console.log('üß™ –¢–ï–°–¢–ò–†–£–ï–ú –ù–û–í–´–ô –ê–õ–ì–û–†–ò–¢–ú...');
    console.log('üìä –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', testInitData);
    
    const result = await validateInitData(testInitData, { debug: true });
    
    res.json({
      success: true,
      validationResult: result,
      testData: {
        initData: testInitData,
        expectedHash: '8bc3031175fe510023776ac58e5a4e20b02b726fd70d6c72d5a84cd74458829b',
        algorithm: 'exclude_signature_and_hash'
      }
    });
  } catch (error) {
    console.error('‚ùå Test hash validation error:', error);
    
    if (error instanceof Error) {
      console.error('‚ùå Test hash error details:', {
        name: error.name,
        message: error.message,
        stack: error.stack
      });
    }
    
    res.status(500).json({ 
      error: 'Test failed',
      details: process.env.NODE_ENV === 'development' && error instanceof Error 
        ? error.message 
        : undefined
    });
  }
};

/**
 * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram Login Widget
 * POST /api/auth/telegram-widget
 */
export const telegramWidgetAuth = async (req: Request, res: Response): Promise<void> => {
  try {
    console.log('üåê Telegram Widget authentication started');
    
    const widgetData = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!widgetData.id || !widgetData.auth_date || !widgetData.hash) {
      console.error('‚ùå Missing required fields in widget data:', {
        hasId: !!widgetData.id,
        hasAuthDate: !!widgetData.auth_date,
        hasHash: !!widgetData.hash
      });
      res.status(400).json({ 
        error: 'Missing required fields: id, auth_date, hash' 
      });
      return;
    }

    console.log('üìã Widget data received:', {
      id: widgetData.id,
      first_name: widgetData.first_name,
      username: widgetData.username,
      auth_date: widgetData.auth_date
    });

    // üîÑ –í–ê–ñ–ù–û: –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ö—ç—à–∞ Telegram Widget
    // –î–ª—è –¥–µ–º–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, –Ω–æ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û
    const isHashValid = await validateTelegramWidgetHash(widgetData);
    
    if (!isHashValid) {
      console.error('‚ùå Telegram Widget hash validation failed');
      res.status(401).json({ error: 'Invalid Telegram widget data' });
      return;
    }

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è findOrCreateUser
    const telegramUser = {
      id: widgetData.id,
      first_name: widgetData.first_name || '',
      last_name: widgetData.last_name || '',
      username: widgetData.username || '',
      photo_url: widgetData.photo_url || '',
      language_code: widgetData.language_code || 'ru',
      allows_write_to_pm: true, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è widget
      is_bot: false
    };

    // –ü–æ–∏—Å–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üîÑ Finding or creating user from widget data...');
    const user = await findOrCreateUser(telegramUser);
    console.log('‚úÖ User processed:', user.id);

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
    const token = generateToken(user.id);

    console.log('‚úÖ Telegram Widget authentication successful');

    res.json({
      token,
      user: {
        id: user.id.toString(),
        firstName: user.firstName,
        lastName: user.lastName,
        username: user.username,
        telegramId: user.telegramId.toString()
      }
    });

  } catch (error) {
    console.error('‚ùå Telegram Widget authentication error:', error);
    
    if (error instanceof Error) {
      console.error('‚ùå Widget auth error details:', {
        name: error.name,
        message: error.message,
        stack: error.stack,
        timestamp: new Date().toISOString()
      });
    }
    
    res.status(500).json({ 
      error: 'Internal server error during widget authentication',
      details: process.env.NODE_ENV === 'development' && error instanceof Error 
        ? error.message 
        : undefined
    });
  }
};

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ö—ç—à–∞ Telegram Widget –¥–∞–Ω–Ω—ã—Ö
 * TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Telegram
 */
const validateTelegramWidgetHash = async (widgetData: any): Promise<boolean> => {
  try {
    // üîÑ –í–†–ï–ú–ï–ù–ù–ê–Ø –ó–ê–ì–õ–£–®–ö–ê - –í –ü–†–û–î–ê–ö–®–ï–ù–ï –†–ï–ê–õ–ò–ó–û–í–ê–¢–¨ –ü–†–û–í–ï–†–ö–£!
    console.log('‚ö†Ô∏è TEMPORARY: Skipping Telegram Widget hash validation');
    console.log('üìä Widget hash to validate:', widgetData.hash);
    
    // –†–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞:
    // 1. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å data-check-string –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    // 2. –í—ã—á–∏—Å–ª–∏—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ BOT_TOKEN
    // 3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å HMAC-SHA256 –ø–æ–¥–ø–∏—Å—å
    // 4. –°—Ä–∞–≤–Ω–∏—Ç—å —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º hash
    
    return true; // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ
    
  } catch (error) {
    console.error('‚ùå Widget hash validation error:', error);
    return false;
  }
};